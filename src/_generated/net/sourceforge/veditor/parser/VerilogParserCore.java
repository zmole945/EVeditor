/* Generated By:JavaCC: Do not edit this line. VerilogParserCore.java */
package net.sourceforge.veditor.parser;

public abstract class VerilogParserCore implements VerilogParserCoreConstants {
        protected abstract void addModule(int begin, String name);
        protected abstract void endModule(int line);
        protected abstract void addPort(int line, String portName);
        protected abstract void addVariable(int line, String varName);
        protected abstract void addParameter(int line, String name, String value);
        protected abstract void addElement(int begin, int end, String type, String name);
        protected abstract void addInstance(int begin, int end, String module, String inst);
        protected abstract void beginStatement();
        protected abstract void endStatement();

        public void parse() throws ParseException
        {
                modules();
        }

  final public void modules() throws ParseException {
        Token name ;
        Token end ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(MODULE);
      name = identifier();
                        addModule( name.beginLine, name.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PORT_HEAD:
        case BQ:
        case IDENT:
          argument();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(COMMA);
            argument();
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(EOS);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPECIFY:
        case FUNCTION:
        case TASK:
        case GENERATE:
        case PORT_HEAD:
        case VARIABLE_HEAD:
        case PARAMETER:
        case SIGNED:
        case STMT_HEAD:
        case BLOCK_HEAD:
        case BQ:
        case IDENT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        moduleBody();
      }
      end = jj_consume_token(ENDMODULE);
                        endModule( end.beginLine );
    }
  }

  final public void argument() throws ParseException {
        Token ident;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PORT_HEAD:
      jj_consume_token(PORT_HEAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_HEAD:
      case SIGNED:
        variableHead();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        skipTo(RBRACKET);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      ident = identifier();
                        addPort( ident.beginLine, ident.image );
      break;
    case BQ:
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void moduleBody() throws ParseException {
        Token   module, inst, iend ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PORT_HEAD:
      jj_consume_token(PORT_HEAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_HEAD:
      case SIGNED:
        variableHead();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                                                beginStatement();
      port();
                                                                           endStatement();
      break;
    case PARAMETER:
      jj_consume_token(PARAMETER);
                             beginStatement();
      parameter();
                                                             endStatement();
      break;
    case VARIABLE_HEAD:
    case SIGNED:
      variableHead();
                                beginStatement();
      variable();
                                                               endStatement();
      break;
    case STMT_HEAD:
      jj_consume_token(STMT_HEAD);
                             beginStatement();
      skipTo(EOS);
                                                               endStatement();
      break;
    case BLOCK_HEAD:
      jj_consume_token(BLOCK_HEAD);
                              beginStatement();
      statement();
                                                              endStatement();
      break;
    case SPECIFY:
      jj_consume_token(SPECIFY);
                           beginStatement();
      skipTo(ENDSPECIFY);
                                                                    endStatement();
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
                            beginStatement();
      function();
                                                           endStatement();
      break;
    case TASK:
      jj_consume_token(TASK);
                        beginStatement();
      task();
                                                   endStatement();
      break;
    case GENERATE:
      generate();
      break;
    case BQ:
    case IDENT:
      module = identifier();
                  beginStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
        jj_consume_token(PARA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BQ:
        case IDENT:
          identifier();
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          skipParen();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      inst = identifier();
      jj_consume_token(LPAREN);
      skipParen();
      jj_consume_token(RPAREN);
      iend = jj_consume_token(EOS);
                        addInstance( module.beginLine, iend.endLine, module.image, inst.image );
                        endStatement();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void variableHead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_HEAD:
      jj_consume_token(VARIABLE_HEAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNED:
        jj_consume_token(SIGNED);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case SIGNED:
      jj_consume_token(SIGNED);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Token identifier() throws ParseException {
        Token token ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BQ:
      jj_consume_token(BQ);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    token = jj_consume_token(IDENT);
                {if (true) return token ;}
    throw new Error("Missing return statement in function");
  }

  final public void port() throws ParseException {
        Token port ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipTo(RBRACKET);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    port = identifier();
                addPort( port.beginLine, port.image );
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      port = identifier();
                        addPort( port.beginLine, port.image );
    }
    jj_consume_token(EOS);
  }

  final public void variable() throws ParseException {
        Token variable ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipTo(RBRACKET);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    variable = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipTo(RBRACKET);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                addVariable( variable.beginLine, variable.image );
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      variable = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        skipTo(RBRACKET);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
                        addVariable( variable.beginLine, variable.image );
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOS:
      jj_consume_token(EOS);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      skipTo(EOS);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parameter() throws ParseException {
        Token parameter;
        Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipTo(RBRACKET);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    parameter = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipTo(RBRACKET);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(EQUAL);
    value = skipWord();
                addParameter( parameter.beginLine, parameter.image, value.image );
    skipTo(EOS);
  }

  final public void delay() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      break;
    case PARA:
      jj_consume_token(PARA);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      skipParen();
      jj_consume_token(RPAREN);
      break;
    case BQ:
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void statement() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
      case AT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
      delay();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOS:
      jj_consume_token(EOS);
      break;
    case COLON:
      jj_consume_token(COLON);
      identifier();
      break;
    case STMT_HEAD:
      jj_consume_token(STMT_HEAD);
      skipTo(EOS);
      break;
    case IF:
      ifStatement();
      break;
    case BEGIN:
    case FORK:
      block();
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      skipTo(EOS);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      skipTo(EOS);
      break;
    case BQ:
    case IDENT:
      identifier();
      skipTo(EOS);
      break;
    case CASE:
    case CASEX:
      caseStatement();
      break;
    case WHILE:
      whileStatement();
      break;
    case FOR:
      forStatement();
      break;
    case FOREVER:
      foreverStatement();
      break;
    case REPEAT:
      repeatStatement();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case FORK:
      jj_consume_token(FORK);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case FORK:
      case IF:
      case WHILE:
      case FOR:
      case FOREVER:
      case REPEAT:
      case CASE:
      case CASEX:
      case STMT_HEAD:
      case LBRACE:
      case EOS:
      case PARA:
      case AT:
      case BQ:
      case DOLLAR:
      case COLON:
      case IDENT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_7;
      }
      statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
      break;
    case JOIN:
      jj_consume_token(JOIN);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void function() throws ParseException {
        Token name, end ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipBracket();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    name = identifier();
    end = skipTo(ENDFUNCTION);
                addElement( name.beginLine, end.endLine, "function", name.image );
  }

  final public void task() throws ParseException {
        Token name, end ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      skipBracket();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    name = identifier();
    end = skipTo(ENDTASK);
                addElement( name.beginLine, end.endLine, "task", name.image );
  }

  final public void generate() throws ParseException {
    jj_consume_token(GENERATE);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFY:
      case IF:
      case FOR:
      case FUNCTION:
      case TASK:
      case GENERATE:
      case PORT_HEAD:
      case VARIABLE_HEAD:
      case PARAMETER:
      case SIGNED:
      case STMT_HEAD:
      case BLOCK_HEAD:
      case BQ:
      case IDENT:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      generateStatement();
    }
    jj_consume_token(ENDGENERATE);
  }

  final public void generateStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      generateForStatement();
      break;
    case IF:
      generateIfStatement();
      break;
    case SPECIFY:
    case FUNCTION:
    case TASK:
    case GENERATE:
    case PORT_HEAD:
    case VARIABLE_HEAD:
    case PARAMETER:
    case SIGNED:
    case STMT_HEAD:
    case BLOCK_HEAD:
    case BQ:
    case IDENT:
      moduleBody();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ifStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void caseStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      break;
    case CASEX:
      jj_consume_token(CASEX);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BQ:
      case IDENT:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_9;
      }
      identifier();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        identifier();
      }
      jj_consume_token(COLON);
      statement();
    }
    jj_consume_token(ENDCASE);
  }

  final public void whileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void forStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void foreverStatement() throws ParseException {
    jj_consume_token(FOREVER);
    statement();
  }

  final public void repeatStatement() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void generateForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      identifier();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      generateStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFY:
      case IF:
      case FOR:
      case FUNCTION:
      case TASK:
      case GENERATE:
      case PORT_HEAD:
      case VARIABLE_HEAD:
      case PARAMETER:
      case SIGNED:
      case STMT_HEAD:
      case BLOCK_HEAD:
      case BQ:
      case IDENT:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(END);
  }

  final public void generateIfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    skipParen();
    jj_consume_token(RPAREN);
    jj_consume_token(BEGIN);
    label_12:
    while (true) {
      generateStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFY:
      case IF:
      case FOR:
      case FUNCTION:
      case TASK:
      case GENERATE:
      case PORT_HEAD:
      case VARIABLE_HEAD:
      case PARAMETER:
      case SIGNED:
      case STMT_HEAD:
      case BLOCK_HEAD:
      case BQ:
      case IDENT:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
      label_13:
      while (true) {
        generateStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPECIFY:
        case IF:
        case FOR:
        case FUNCTION:
        case TASK:
        case GENERATE:
        case PORT_HEAD:
        case VARIABLE_HEAD:
        case PARAMETER:
        case SIGNED:
        case STMT_HEAD:
        case BLOCK_HEAD:
        case BQ:
        case IDENT:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_13;
        }
      }
      jj_consume_token(END);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  Token skipWord() throws ParseException {
        Token token ;
        token = getToken( 1 );
        if ( token.kind == EOF )
                throw new ParseException("unexpected EOF");
        getNextToken();
        return token ;
  }

  Token skipTo(int skip) throws ParseException {
        Token token ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == skip )
                {
                        getNextToken();
                        break ;
                }
                getNextToken();
        }
        return token ;
  }

  void skipParen() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == LPAREN )
                        nesting++;
                if ( token.kind == RPAREN )
                {
                        nesting--;
                        if ( nesting == 0 )
                                break;
                }
                getNextToken();
        }
  }

  void skipBracket() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == LBRACKET )
                        nesting++;
                if ( token.kind == RBRACKET )
                {
                        nesting--;
                        if ( nesting == 0 )
                                break;
                }
                getNextToken();
        }
  }

  void skipToEndcase() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == CASE )
                        nesting++;
                if ( token.kind == ENDCASE )
                {
                        nesting--;
                        if ( nesting == 0 )
                        {
                                getNextToken();
                                break;
                        }
                }
                getNextToken();
        }
  }

  public VerilogParserCoreTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4000,0x0,0x0,0x0,0x80100000,0x0,0x0,0x0,0x0,0x0,0x0,0x80100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f450000,0x50000,0x3f450000,0xa0000,0x0,0x0,0x82500000,0x82500000,0x800000,0x30000000,0x0,0x0,0x0,0x82500000,0x82500000,0x82500000,0x800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x400000,0x2100020,0x800,0x21007ea,0x140,0x8000,0x2100020,0x140,0x2100800,0x40000,0x21007ea,0x100,0x140,0x100000,0x8000,0x400000,0x8000,0x8000,0x400000,0x8000,0x1020000,0x8000,0x8000,0xc0000,0x2100800,0xc0000,0x2b22200,0x0,0x2be2200,0x0,0x8000,0x8000,0x21007ea,0x21007ea,0x0,0x0,0x2100000,0x400000,0x800000,0x21007ea,0x21007ea,0x21007ea,0x0,};
   }

  public VerilogParserCore(java.io.InputStream stream) {
     this(stream, null);
  }
  public VerilogParserCore(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VerilogParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  public VerilogParserCore(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new VerilogParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  public VerilogParserCore(VerilogParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  public void ReInit(VerilogParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[60];
    for (int i = 0; i < 60; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
