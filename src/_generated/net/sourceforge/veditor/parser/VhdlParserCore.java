/* Generated By:JavaCC: Do not edit this line. VhdlParserCore.java */
package net.sourceforge.veditor.parser;

public abstract class VhdlParserCore implements VhdlParserCoreConstants {
        protected abstract void addModule(int begin, String name);
        protected abstract void endModule(int line);
        protected abstract void addPort(int line, String portName);
        protected abstract void addVariable(int line, String varName);
        protected abstract void addParameter(int line, String name, String value);
        protected abstract void addElement(int begin, int end, String type, String name);
        protected abstract void addInstance(int begin, int end, String module, String inst);
        protected abstract void beginStatement();
        protected abstract void endStatement();

        public void parse() throws ParseException
        {
                modules();
        }

  final public void modules() throws ParseException {
        Token name ;
        Token end ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIBRARY:
      case USE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIBRARY:
        jj_consume_token(LIBRARY);
        skipTo(EOS);
        break;
      case USE:
        jj_consume_token(USE);
        skipTo(EOS);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ENTITY);
    name = identifier();
    jj_consume_token(IS);
                addModule( name.beginLine, name.image );
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
      case PORT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        jj_consume_token(GENERIC);
        jj_consume_token(LPAREN);
        skipParen();
        jj_consume_token(RPAREN);
        jj_consume_token(EOS);
        break;
      case PORT:
        jj_consume_token(PORT);
        jj_consume_token(LPAREN);
        port();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOS:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(EOS);
          port();
        }
        jj_consume_token(RPAREN);
        jj_consume_token(EOS);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTITY:
      jj_consume_token(ENTITY);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
    jj_consume_token(ARCHITECTURE);
    identifier();
    jj_consume_token(OF);
    identifier();
    jj_consume_token(IS);
    moduleBody();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    end = jj_consume_token(EOS);
                endModule( end.beginLine );
  }

  final public void port() throws ParseException {
        Token port ;
    port = identifier();
                addPort( port.beginLine, port.image );
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      port = identifier();
                        addPort( port.beginLine, port.image );
    }
    jj_consume_token(COLON);
    jj_consume_token(MODE);
    identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE:
      jj_consume_token(RANGE);
      identifier();
      jj_consume_token(TO);
      identifier();
      break;
    default:
      jj_la1[10] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        skipParen();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    }
  }

  final public void moduleBody() throws ParseException {
        Token   module, inst, iend ;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
      case PROCEDURE:
      case FUNCTION:
      case SIGNAL:
      case SHARED:
      case VARIABLE:
      case TYPE:
      case SUBTYPE:
      case FILE:
      case ALIAS:
      case ATTRIBUTE:
      case COMPONENT:
      case FOR:
      case DISCONNECT:
      case GROUP:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      declaration();
    }
    jj_consume_token(BEGIN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCESS:
      case BLOCK:
      case ASSERT:
      case WITH:
      case IDENT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      statement();
    }
    jj_consume_token(END);
  }

  final public Token identifier() throws ParseException {
        Token token ;
    token = jj_consume_token(IDENT);
                {if (true) return token ;}
    throw new Error("Missing return statement in function");
  }

  final public void declaration() throws ParseException {
        Token variable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case SIGNAL:
    case SHARED:
    case VARIABLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        jj_consume_token(CONSTANT);
        break;
      case SIGNAL:
        jj_consume_token(SIGNAL);
        break;
      case SHARED:
      case VARIABLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SHARED:
          jj_consume_token(SHARED);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(VARIABLE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      variable = identifier();
                        addVariable( variable.beginLine, variable.image );
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        variable = identifier();
                                addVariable( variable.beginLine, variable.image );
      }
      jj_consume_token(COLON);
      skipTo(EOS);
      break;
    case TYPE:
    case SUBTYPE:
    case FILE:
    case ALIAS:
    case ATTRIBUTE:
    case FOR:
    case DISCONNECT:
    case GROUP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        jj_consume_token(TYPE);
        break;
      case SUBTYPE:
        jj_consume_token(SUBTYPE);
        break;
      case FILE:
        jj_consume_token(FILE);
        break;
      case ALIAS:
        jj_consume_token(ALIAS);
        break;
      case ATTRIBUTE:
        jj_consume_token(ATTRIBUTE);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case DISCONNECT:
        jj_consume_token(DISCONNECT);
        break;
      case GROUP:
        jj_consume_token(GROUP);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      skipTo(EOS);
      break;
    case COMPONENT:
      jj_consume_token(COMPONENT);
      skipTo2(END, COMPONENT);
      skipTo(EOS);
      break;
    case PROCEDURE:
    case FUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        jj_consume_token(PROCEDURE);
        break;
      case FUNCTION:
        jj_consume_token(FUNCTION);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      skipTo(BEGIN);
      skipEnd();
      jj_consume_token(END);
      jj_consume_token(EOS);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void statement() throws ParseException {
        Token ident, module, iend;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ident = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
                             beginStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTITY:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ENTITY:
            jj_consume_token(ENTITY);
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          module = identifier();
          iend = skipTo(EOS);
                                        addInstance( ident.beginLine, iend.endLine, module.image, ident.image );
          break;
        case FOR:
        case IF:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            jj_consume_token(IF);
            break;
          case FOR:
            jj_consume_token(FOR);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          skipTo(GENERATE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BEGIN:
            jj_consume_token(BEGIN);
            label_8:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PROCESS:
              case BLOCK:
              case ASSERT:
              case WITH:
              case IDENT:
                ;
                break;
              default:
                jj_la1[21] = jj_gen;
                break label_8;
              }
              statement();
            }
            break;
          case PROCESS:
          case BLOCK:
          case ASSERT:
          case WITH:
          case IDENT:
            statement();
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(END);
          jj_consume_token(GENERATE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            identifier();
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          jj_consume_token(EOS);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                         endStatement();
        break;
      default:
        jj_la1[26] = jj_gen;
                         beginStatement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          skipParen();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        skipTo(EOS);
                         endStatement();
      }
      break;
    case WITH:
      jj_consume_token(WITH);
                        beginStatement();
      skipTo(EOS);
                                                          endStatement();
      break;
    case PROCESS:
      jj_consume_token(PROCESS);
                           beginStatement();
      process();
                                                         endStatement();
      break;
    case BLOCK:
      jj_consume_token(BLOCK);
                         beginStatement();
      skipTo2(END, BLOCK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        identifier();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(EOS);
                                                                      endStatement();
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
                          beginStatement();
      skipTo(EOS);
                                                            endStatement();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void process() throws ParseException {
    skipTo2(END, PROCESS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
  }

  Token skipTo(int skip) throws ParseException {
        Token token ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == skip )
                {
                        getNextToken();
                        break ;
                }
                getNextToken();
        }
        return token ;
  }

  Token skipTo2(int skip1, int skip2) throws ParseException {
        Token token ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == skip1 )
                {
                        getNextToken();
                        token = getToken( 1 );
                        if ( token.kind == skip2 )
                        {
                                getNextToken();
                                break ;
                        }
                }
                else
                        getNextToken();
        }
        return token ;
  }

  void skipParen() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == LPAREN )
                        nesting++;
                if ( token.kind == RPAREN )
                {
                        nesting--;
                        if ( nesting == 0 )
                                break;
                }
                getNextToken();
        }
  }

  void skipBracket() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == LBRACKET )
                        nesting++;
                if ( token.kind == RBRACKET )
                {
                        nesting--;
                        if ( nesting == 0 )
                                break;
                }
                getNextToken();
        }
  }

  void skipEnd() throws ParseException {
        Token token ;
        int nesting = 1 ;
        for(;;)
        {
                token = getToken( 1 );
                if ( token.kind == EOF )
                        throw new ParseException("unexpected EOF");
                if ( token.kind == BEGIN || token.kind == IF || token.kind == CASE )
                        nesting++;
                if ( token.kind == END )
                {
                        nesting--;
                        if ( nesting == 0 )
                                break;
                        else
                                getNextToken(); // if or case
                }
                getNextToken();
        }
  }

  public VhdlParserCoreTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xc00,0xc00,0x30000,0x0,0x30000,0x1000,0x0,0x0,0x0,0x0,0x0,0xffe00000,0x40000,0x2000000,0x7200000,0x0,0xf8000000,0xc00000,0xffe00000,0x1000,0x0,0x40000,0xc0000,0x0,0x1000,0x0,0x0,0x0,0x40000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x80000,0x0,0x0,0x10000000,0x10000000,0x1000000,0x2000,0x400,0x33,0x100008c0,0x0,0x0,0x1000000,0x32,0x0,0x33,0x0,0x6,0x100008c0,0x100008c0,0x10000000,0x10000006,0x2000,0x2000000,0x10000000,0x100008c0,0x10000000,};
   }

  public VhdlParserCore(java.io.InputStream stream) {
     this(stream, null);
  }
  public VhdlParserCore(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VhdlParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public VhdlParserCore(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new VhdlParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public VhdlParserCore(VhdlParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(VhdlParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[63];
    for (int i = 0; i < 63; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
