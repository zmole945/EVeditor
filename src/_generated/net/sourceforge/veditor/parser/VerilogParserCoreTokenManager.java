/* Generated By:JavaCC: Do not edit this line. VerilogParserCoreTokenManager.java */
package net.sourceforge.veditor.parser;

public class VerilogParserCoreTokenManager implements VerilogParserCoreConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1200L) != 0L)
            return 3;
         if ((active0 & 0x1540a28000L) != 0L)
         {
            jjmatchedKind = 57;
            return 20;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 76;
         }
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 58;
            return 0;
         }
         if ((active0 & 0x100b61c4000L) != 0L)
         {
            jjmatchedKind = 57;
            return 48;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 57;
            return 46;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 26;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 65;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 15;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 57;
            return 53;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 57;
            return 82;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0L)
            return 48;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 25;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 75;
         }
         if ((active0 & 0x1000L) != 0L)
            return 4;
         if ((active0 & 0x197f7bfc000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return 24;
         }
         if ((active0 & 0x1546268000L) != 0L)
            return 48;
         if ((active0 & 0x182b9994000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return 48;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 13;
               jjmatchedPos = 2;
            }
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0x2308c0000L) != 0L)
            return 48;
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 13;
               jjmatchedPos = 3;
            }
            return 5;
         }
         if ((active0 & 0x19dcd31c000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 3;
            }
            return 48;
         }
         return -1;
      case 4:
         if ((active0 & 0x21010000L) != 0L)
            return 48;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active0 & 0x19dcc30c000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x9dc4308000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 48;
         }
         if ((active0 & 0x10008004000L) != 0L)
            return 48;
         if ((active0 & 0x1000L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x444100000L) != 0L)
            return 48;
         if ((active0 & 0x9980208000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active0 & 0x880000000L) != 0L)
            return 48;
         if ((active0 & 0x9100208000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 48;
         }
         return -1;
      case 8:
         if ((active0 & 0x1100200000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
            return 48;
         }
         if ((active0 & 0x8000008000L) != 0L)
            return 48;
         return -1;
      case 9:
         if ((active0 & 0x200000L) != 0L)
            return 48;
         if ((active0 & 0x1100000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 12:
         return jjStopAtPos(0, 10);
      case 13:
         return jjStopAtPos(0, 8);
      case 35:
         return jjStopAtPos(0, 50);
      case 36:
         return jjStopAtPos(0, 53);
      case 40:
         return jjStopAtPos(0, 43);
      case 41:
         return jjStopAtPos(0, 44);
      case 44:
         return jjStopAtPos(0, 54);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 58:
         return jjStopAtPos(0, 55);
      case 59:
         return jjStopAtPos(0, 49);
      case 61:
         return jjStopAtPos(0, 56);
      case 64:
         return jjStopAtPos(0, 51);
      case 91:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 93:
         return jjStopAtPos(0, 48);
      case 96:
         return jjStopAtPos(0, 52);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x30000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1540a28000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x86040000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000100000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 123:
         return jjStopAtPos(0, 45);
      case 125:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L);
      case 96:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8230000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x808010000L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1540228000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x60c4000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 100:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x154020c000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x101000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8004040000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x230800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0100000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 48);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x82c000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 107:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 48);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 48);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1001000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x448000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x11000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 120:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 5);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x8004200000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x440000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100200000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 107:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 48);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 48);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 48);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 48);
         break;
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 107;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 53:
               case 48:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 46:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 24:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 26:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 2:
                  if ((0xfffffffefffffdffL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if ((0x83ff408400000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 15:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 20:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 76:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 75:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 65:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 82:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 25:
                  if ((0x83ff408400000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 49:
                  if ((0xfffffffefffffdffL & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 54:
                  if (curChar == 48 && kind > 41)
                     kind = 41;
                  break;
               case 57:
                  if (curChar == 49 && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 2:
                  if (kind > 58)
                     kind = 58;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjAddStates(0, 1);
                  else if (curChar == 105)
                     jjAddStates(2, 5);
                  else if (curChar == 114)
                     jjAddStates(6, 7);
                  else if (curChar == 112)
                     jjAddStates(8, 9);
                  else if (curChar == 116)
                     jjAddStates(10, 12);
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 103)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 95;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 1:
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 96)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 116 && kind > 37)
                     kind = 37;
                  break;
               case 8:
               case 80:
               case 83:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101 && kind > 38)
                     kind = 38;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116 && kind > 38)
                     kind = 38;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 114 && kind > 38)
                     kind = 38;
                  break;
               case 23:
                  if (curChar == 97)
                     jjCheckNAdd(22);
                  break;
               case 27:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 109 && kind > 41)
                     kind = 41;
                  break;
               case 29:
               case 38:
                  if (curChar == 97)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 102 && kind > 41)
                     kind = 41;
                  break;
               case 47:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (kind > 58)
                     kind = 58;
                  break;
               case 50:
                  if (curChar == 116)
                     jjAddStates(10, 12);
                  break;
               case 51:
                  if (curChar == 101 && kind > 41)
                     kind = 41;
                  break;
               case 52:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 55:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 112)
                     jjAddStates(8, 9);
                  break;
               case 61:
                  if (curChar == 112 && kind > 41)
                     kind = 41;
                  break;
               case 62:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 110 && kind > 41)
                     kind = 41;
                  break;
               case 67:
                  if (curChar == 119)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 114)
                     jjAddStates(6, 7);
                  break;
               case 74:
                  if (curChar == 108 && kind > 38)
                     kind = 38;
                  break;
               case 77:
                  if (curChar == 103 && kind > 38)
                     kind = 38;
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 105)
                     jjAddStates(2, 5);
                  break;
               case 81:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 84:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 101)
                     jjCheckNAdd(22);
                  break;
               case 87:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 108 && kind > 42)
                     kind = 42;
                  break;
               case 92:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 97)
                     jjAddStates(0, 1);
                  break;
               case 98:
                  if (curChar == 103)
                     jjCheckNAdd(66);
                  break;
               case 99:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 115 && kind > 42)
                     kind = 42;
                  break;
               case 103:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 107 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x4L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 96:
         return jjMoveStringLiteralDfa1_2(0x10L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x10L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x10L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_2(active0, 0x10L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x10L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(5, 4);
         break;
      default :
         return 6;
   }
   return 6;
}
static final int[] jjnextStates = {
   101, 106, 82, 85, 90, 96, 76, 78, 65, 72, 53, 56, 59, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\155\157\144\165\154\145", "\145\156\144\155\157\144\165\154\145", 
"\142\145\147\151\156", "\145\156\144", "\146\157\162\153", "\152\157\151\156", 
"\163\160\145\143\151\146\171", "\145\156\144\163\160\145\143\151\146\171", "\151\146", "\145\154\163\145", 
"\167\150\151\154\145", "\146\157\162", "\146\157\162\145\166\145\162", "\162\145\160\145\141\164", 
"\143\141\163\145", "\143\141\163\145\170", "\145\156\144\143\141\163\145", 
"\146\165\156\143\164\151\157\156", "\145\156\144\146\165\156\143\164\151\157\156", "\164\141\163\153", 
"\145\156\144\164\141\163\153", "\147\145\156\145\162\141\164\145", 
"\145\156\144\147\145\156\145\162\141\164\145", null, null, "\160\141\162\141\155\145\164\145\162", 
"\163\151\147\156\145\144", null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\43", 
"\100", "\140", "\44", "\54", "\72", "\75", null, null, "\133\56\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_ELSE_BLOCK", 
};
public static final int[] jjnewLexState = {
   -1, 1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffc001L, 
};
static final long[] jjtoSkip = {
   0x3fd4L, 
};
static final long[] jjtoSpecial = {
   0x3800L, 
};
static final long[] jjtoMore = {
   0x2aL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[107];
private final int[] jjstateSet = new int[214];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public VerilogParserCoreTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VerilogParserCoreTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 107; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 3)
         {
            jjmatchedKind = 3;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 5)
         {
            jjmatchedKind = 5;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
