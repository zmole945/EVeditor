/* Generated By:JavaCC: Do not edit this line. VerilogParserCore.java */
package net.sourceforge.veditor.parser.verilog;

public abstract class VerilogParserCore implements VerilogParserCoreConstants {
        public static final int STATEMENT = 0;
        public static final int ASSIGN_STMT = 1;
        public static final int INITIAL_BLOCK = 2;
        public static final int ALWAYS_BLOCK = 3;

        protected abstract void begin(int mode);
        protected abstract void end(int mode);
        protected abstract void beginOutlineElement(Token begin, String name, String type);
        protected abstract void endOutlineElement(Token end, String name, String type);

        protected void beginOutlineElement(Token begin, String type) {
                beginOutlineElement(begin, begin.image, type);
        }
        protected void endOutlineElement(Token end, String type) {
                endOutlineElement(end, end.image, type);
        }

        protected abstract void addCollapsible(int startLine,int endLine);
        protected abstract Expression operator(Expression arg, Token op);
        protected abstract Expression operator(Expression arg1, Token op, Expression arg2);
        protected abstract Expression operator(Expression arg1, Token op, Expression arg2, Expression arg3);
        protected abstract Expression variableReference(Identifier ident);
        protected abstract Expression functionReference(Identifier ident);

        protected abstract void parameterAssignment(String name, Expression value);
        protected abstract void variableAssignment(Identifier ident);
        protected abstract void taskReference(Identifier ident);
        protected abstract void variableConnection(Expression arg, String module, Identifier port);
        protected abstract void variableConnection(Expression arg, String module, int portIndex);
        protected abstract void evaluateAssignment(Token asn, int lvalue, Expression exp);
        protected abstract void beginGenerateBlock(Identifier block);
        protected abstract void endGenerateBlock(Identifier block);

  final public void verilogText() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case IDENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      moduleDecl();
    }
  }

  final public void moduleDecl() throws ParseException {
        Identifier name;
        Token end;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(IDENT);
    }
    jj_consume_token(MODULE);
    name = identifier();
                beginOutlineElement(name, "module#");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      jj_consume_token(PARA);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETER:
        parameterArg();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          parameterArg();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
      case INOUT:
      case IDENT:
        argument();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          argument();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIFY:
      case FUNCTION:
      case TASK:
      case GENERATE:
      case INPUT:
      case OUTPUT:
      case INOUT:
      case INTEGER:
      case REG:
      case WIRE:
      case EVENT:
      case GENVAR:
      case REAL:
      case PARAMETER:
      case LOCALPARAM:
      case PROPERTY:
      case ASSERT:
      case ASSIGN:
      case TIME:
      case REALTIME:
      case DEFPARAM:
      case OR:
      case ALWAYS:
      case INITIAL:
      case SUPPLY:
      case NET_TYPE:
      case PRIM_1IN_XOUT:
      case PRIM_1OUT_XIN:
      case PRIM_1OUT_1IN_1CNTL:
      case PRIM_1OUT:
      case PRIM_1OUT_1IN_NC_PC:
      case PRIM_BI:
      case EOS:
      case IDENT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      moduleItem();
    }
    end = jj_consume_token(ENDMODULE);
            endOutlineElement(end, name. image, "module#");
  }

  final public void parameterArg() throws ParseException {
        Token name,value;
        String mod, range;
    jj_consume_token(PARAMETER);
    mod = parameterModifier();
    range = bitRange();
    parameterAssign("parameter", mod, range);
  }

  final public String parameterModifier() throws ParseException {
        String ret = " ";
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case SIGNED:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
        jj_consume_token(REAL);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case SIGNED:
        jj_consume_token(SIGNED);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        ret += token.image + " ";
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public void parameterAssign(String type, String mod, String range) throws ParseException {
        Identifier name;
        Expression value;
    name = identifier();
    jj_consume_token(AGN);
    value = constantExpression();
                String types = type + "#" + mod + "#" + range + "#" + value.toString();
                beginOutlineElement(name, types);
                parameterAssignment(name.image, value);
                endOutlineElement(name, types);
  }

  final public void argument() throws ParseException {
        Token direction;
        Identifier name;
        String modifier="";
        String range;
        Token asn;
        Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case OUTPUT:
    case INOUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
        direction = jj_consume_token(INPUT);
        break;
      case OUTPUT:
        direction = jj_consume_token(OUTPUT);
        break;
      case INOUT:
        direction = jj_consume_token(INOUT);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      modifier = variableModifier();
      range = bitRange();
      name = identifier();
                        String types = "port#" + direction.image + "#" + modifier + "#" + range;
                        beginOutlineElement(name, types);
                        endOutlineElement(name, types);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGN:
        asn = jj_consume_token(AGN);
        exp = expression();
                                variableAssignment(name);
                                evaluateAssignment(asn, name.getWidth(), exp);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void moduleItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case TASK:
    case INTEGER:
    case REG:
    case WIRE:
    case EVENT:
    case GENVAR:
    case REAL:
    case PARAMETER:
    case LOCALPARAM:
    case ASSERT:
    case ASSIGN:
    case TIME:
    case REALTIME:
    case DEFPARAM:
    case OR:
    case ALWAYS:
    case INITIAL:
    case SUPPLY:
    case NET_TYPE:
    case PRIM_1IN_XOUT:
    case PRIM_1OUT_XIN:
    case PRIM_1OUT_1IN_1CNTL:
    case PRIM_1OUT:
    case PRIM_1OUT_1IN_NC_PC:
    case PRIM_BI:
    case EOS:
    case IDENT:
      moduleOrGenerateItem();
      break;
    case INPUT:
    case OUTPUT:
    case INOUT:
      portDecl();
      break;
    case SPECIFY:
      jj_consume_token(SPECIFY);
                   begin(STATEMENT);
      skipTo(ENDSPECIFY);
                                                            end(STATEMENT);
      break;
    case GENERATE:
      generate();
      break;
    case PROPERTY:
      jj_consume_token(PROPERTY);
      skipTo(ENDPROPERTY);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void moduleOrGenerateItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case REG:
    case WIRE:
    case EVENT:
    case GENVAR:
    case REAL:
    case TIME:
    case REALTIME:
    case SUPPLY:
    case NET_TYPE:
      variableDecl();
      break;
    case PARAMETER:
    case LOCALPARAM:
      parameterDecl();
      break;
    case TASK:
      taskDecl();
      break;
    case FUNCTION:
      functionDecl();
      break;
    case DEFPARAM:
      jj_consume_token(DEFPARAM);
              begin(STATEMENT);
      skipTo(EOS);
                                                end(STATEMENT);
      break;
    case ASSIGN:
      assign();
      break;
    case OR:
    case PRIM_1IN_XOUT:
    case PRIM_1OUT_XIN:
    case PRIM_1OUT_1IN_1CNTL:
    case PRIM_1OUT:
    case PRIM_1OUT_1IN_NC_PC:
    case PRIM_BI:
      primitiveInstance();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(3)) {
        moduleInstance();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALWAYS:
        case INITIAL:
          initialAlways();
          break;
        case ASSERT:
          jj_consume_token(ASSERT);
          skipTo(EOS);
          break;
        case IDENT:
          identifier();
          jj_consume_token(COLON);
          jj_consume_token(ASSERT);
          skipTo(EOS);
          break;
        case EOS:
          jj_consume_token(EOS);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void portDecl() throws ParseException {
        Token direction;
        String modifier;
        String range;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      direction = jj_consume_token(INPUT);
      break;
    case OUTPUT:
      direction = jj_consume_token(OUTPUT);
      break;
    case INOUT:
      direction = jj_consume_token(INOUT);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    modifier = variableModifier();
          begin(STATEMENT);
    range = bitRange();
    portDeclSingle(direction, modifier, range);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      portDeclSingle(direction, modifier, range);
    }
    jj_consume_token(EOS);
          end(STATEMENT);
  }

  final public String variableModifier() throws ParseException {
        String ret = "";
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REG:
      case WIRE:
      case REAL:
      case SIGNED:
      case TIME:
      case REALTIME:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL:
        jj_consume_token(REAL);
        break;
      case REALTIME:
        jj_consume_token(REALTIME);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case WIRE:
        jj_consume_token(WIRE);
        break;
      case REG:
        jj_consume_token(REG);
        break;
      case SIGNED:
        jj_consume_token(SIGNED);
        break;
      case TIME:
        jj_consume_token(TIME);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        ret += token.image + " ";
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public void portDeclSingle(Token direction, String modifier, String range) throws ParseException {
        Identifier name;
        Token asn;
        Expression exp;
    name = identifier();
                String type = "port#" + direction.image + "#" + modifier + "#" + range + "#cstyle";
                beginOutlineElement(name, type);
                endOutlineElement(name, type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGN:
      asn = jj_consume_token(AGN);
      exp = expression();
                        variableAssignment(name);
                        evaluateAssignment(asn, name.getWidth(), exp);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void primitiveInstance() throws ParseException {
        String prim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIM_1IN_XOUT:
      jj_consume_token(PRIM_1IN_XOUT);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case PRIM_1OUT_XIN:
      jj_consume_token(PRIM_1OUT_XIN);
      break;
    case PRIM_1OUT_1IN_1CNTL:
      jj_consume_token(PRIM_1OUT_1IN_1CNTL);
      break;
    case PRIM_1OUT:
      jj_consume_token(PRIM_1OUT);
      break;
    case PRIM_1OUT_1IN_NC_PC:
      jj_consume_token(PRIM_1OUT_1IN_NC_PC);
      break;
    case PRIM_BI:
      jj_consume_token(PRIM_BI);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            prim = token.image;
    if (jj_2_2(2)) {
      strength();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      delay3();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      identifier();
      bitRange();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    portConnect(prim);
    jj_consume_token(RPAREN);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      identifier();
      bitRange();
      jj_consume_token(LPAREN);
      portConnect(prim);
      jj_consume_token(RPAREN);
    }
    jj_consume_token(EOS);
  }

  final public void moduleInstance() throws ParseException {
        Identifier module, inst;
        Token iend ;
    module = identifier();
          begin(STATEMENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
    case IDENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
        jj_consume_token(PARA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          identifier();
          break;
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
          number();
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          parameterConnect();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      inst = identifier();
                                beginOutlineElement(module, inst.image, "instance#"+module.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case DOT:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case NEG_AND:
        case NEG_OR:
        case NEG_XOR:
        case XOR_NEG:
        case IDENT:
        case SYSTEM_IDENT:
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
          portConnect(module.image);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      iend = jj_consume_token(EOS);
                                endOutlineElement(iend, inst.image, "instance#"+module.image);
                                addCollapsible(module.beginLine, iend.endLine);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      portConnect(module.image);
      jj_consume_token(RPAREN);
      iend = jj_consume_token(EOS);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          end(STATEMENT);
  }

  final public void parameterConnect() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        constantExpression();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOT);
        identifier();
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case NEG_AND:
        case NEG_OR:
        case NEG_XOR:
        case XOR_NEG:
        case IDENT:
        case SYSTEM_IDENT:
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case STRING_LITERAL:
          constantExpression();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      }
      break;
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NEG_AND:
    case NEG_OR:
    case NEG_XOR:
    case XOR_NEG:
    case IDENT:
    case SYSTEM_IDENT:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      constantExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        constantExpression();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void portConnect(String module) throws ParseException {
        int count = 0;
    count = portConnectSingle(module, count);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      count = portConnectSingle(module, count);
    }
  }

  final public int portConnectSingle(String module, int count) throws ParseException {
        Identifier port;
        Expression arg = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      port = identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        arg = expression();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                variableConnection(arg, module, port);
                {if (true) return count + 1;}
      break;
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NEG_AND:
    case NEG_OR:
    case NEG_XOR:
    case XOR_NEG:
    case IDENT:
    case SYSTEM_IDENT:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      arg = expression();
                variableConnection(arg, module, count);
                {if (true) return count + 1;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void assign() throws ParseException {
        int width;
        Token asn;
        Expression exp;
    jj_consume_token(ASSIGN);
         begin(ASSIGN_STMT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      strength();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      delay3();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    width = lvalue();
    asn = jj_consume_token(AGN);
    exp = expression();
                evaluateAssignment(asn, width, exp);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      width = lvalue();
      asn = jj_consume_token(AGN);
      exp = expression();
                        evaluateAssignment(asn, width, exp);
    }
    jj_consume_token(EOS);
         end(ASSIGN_STMT);
  }

  final public void variableDecl() throws ParseException {
        Token variable;
        String type;
        String range;
    type = variableType();
          begin(STATEMENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      strength();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
      jj_consume_token(SIGNED);
                          type += " signed";
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    range = bitRange();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      delay3();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    variableDeclSingle(type, range);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      variableDeclSingle(type, range);
    }
    jj_consume_token(EOS);
          end(STATEMENT);
  }

  final public String variableType() throws ParseException {
        String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WIRE:
    case SUPPLY:
    case NET_TYPE:
      type = netType();
                {if (true) return type;}
      break;
    case INTEGER:
    case REG:
    case EVENT:
    case GENVAR:
    case REAL:
    case TIME:
    case REALTIME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REG:
        jj_consume_token(REG);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case EVENT:
        jj_consume_token(EVENT);
        break;
      case GENVAR:
        jj_consume_token(GENVAR);
        break;
      case TIME:
        jj_consume_token(TIME);
        break;
      case REALTIME:
        jj_consume_token(REALTIME);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return token.image;}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void variableDeclSingle(String mod, String range) throws ParseException {
        Identifier variable;
        Token asn;
        Expression exp;
        int dimension = 0;
    variable = identifier();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_15;
      }
      jj_consume_token(LBRACKET);
      constantExpression();
      jj_consume_token(COLON);
      constantExpression();
      jj_consume_token(RBRACKET);
                                                                 dimension++;
    }
                String type = "variable#" + mod + "#" + range + "#" + dimension;
                beginOutlineElement(variable, type);
                endOutlineElement(variable, type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGN:
      asn = jj_consume_token(AGN);
      exp = expression();
                        variableAssignment(variable);
                        evaluateAssignment(asn, variable.getWidth(), exp);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final public void delay3() throws ParseException {
    jj_consume_token(PARA);
    if (jj_2_3(3)) {
      delayValue();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        minTypMaxExpresstion();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          minTypMaxExpresstion();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            minTypMaxExpresstion();
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void parameterDecl() throws ParseException {
        String type;
        String mod, range;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      jj_consume_token(PARAMETER);
                              type = "parameter";
      break;
    case LOCALPARAM:
      jj_consume_token(LOCALPARAM);
                              type = "localparam";
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    mod = parameterModifier();
    range = bitRange();
    parameterAssign(type, mod, range);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      parameterAssign(type, mod, range);
    }
    jj_consume_token(EOS);
  }

  final public void initialAlways() throws ParseException {
        Token start;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIAL:
      start = jj_consume_token(INITIAL);
      break;
    case ALWAYS:
      start = jj_consume_token(ALWAYS);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (start.image.equals("initial"))
                        begin(INITIAL_BLOCK);
                else
                        begin(ALWAYS_BLOCK);
    statement();
                if (start.image.equals("initial"))
                        end(INITIAL_BLOCK);
                else
                        end(ALWAYS_BLOCK);
                addCollapsible(start.beginLine,token.endLine);
  }

  final public void statement() throws ParseException {
        Token end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case IDENT:
    case SYSTEM_IDENT:
      assignOrTaskEnable();
      break;
    case ASSIGN:
    case DEASSIGN:
    case FORCE:
    case RELEASE:
      proceduralContinuousAssignment();
      break;
    case PARA:
    case AT:
      proceduralTimingControlStatement();
      break;
    case IF:
      ifStatement();
      break;
    case CASE:
      caseStatement();
      break;
    case WHILE:
      whileStatement();
      break;
    case FOR:
      forStatement();
      break;
    case FOREVER:
      foreverStatement();
      break;
    case REPEAT:
      repeatStatement();
      break;
    case WAIT:
      waitStatement();
      break;
    case DISABLE:
      jj_consume_token(DISABLE);
      identifier();
      jj_consume_token(EOS);
      break;
    case 131:
      jj_consume_token(131);
      identifier();
      jj_consume_token(EOS);
      break;
    case BEGIN:
    case FORK:
      block();
      break;
    case EOS:
      jj_consume_token(EOS);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assignOrTaskEnable() throws ParseException {
        Identifier ident;
        Token asn;
        Expression exp;
        int width;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ident = complexIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGN:
      case LE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AGN:
          asn = jj_consume_token(AGN);
          break;
        case LE:
          asn = jj_consume_token(LE);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARA:
        case AT:
          delayOrEventControl();
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        exp = expression();
        jj_consume_token(EOS);
                        variableAssignment(ident);
                        evaluateAssignment(asn, ident.getWidth(), exp);
        break;
      case LPAREN:
      case EOS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          expression();
          label_17:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[59] = jj_gen;
              break label_17;
            }
            jj_consume_token(COMMA);
            expression();
          }
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        jj_consume_token(EOS);
                        taskReference(ident);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBRACE:
      width = lvalueConcatenation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGN:
        asn = jj_consume_token(AGN);
        break;
      case LE:
        asn = jj_consume_token(LE);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
      case AT:
        delayOrEventControl();
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      exp = expression();
      jj_consume_token(EOS);
                evaluateAssignment(asn, width, exp);
      break;
    case SYSTEM_IDENT:
      jj_consume_token(SYSTEM_IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        expression();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_18;
          }
          jj_consume_token(COMMA);
          expression();
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      jj_consume_token(EOS);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void delayOrEventControl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      delayContol();
      break;
    case AT:
      eventContol();
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void delayContol() throws ParseException {
    jj_consume_token(PARA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      delayValue();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      minTypMaxExpresstion();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void delayValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      number();
      break;
    case IDENT:
      identifier();
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void eventContol() throws ParseException {
    jj_consume_token(AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      identifier();
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EDGE:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        eventExpression();
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void eventExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NEG_AND:
    case NEG_OR:
    case NEG_XOR:
    case XOR_NEG:
    case IDENT:
    case SYSTEM_IDENT:
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      expression();
      break;
    case EDGE:
      jj_consume_token(EDGE);
      expression();
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case COMMA:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        expression();
        break;
      case EDGE:
        jj_consume_token(EDGE);
        expression();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void proceduralContinuousAssignment() throws ParseException {
        int width;
        Token asn;
        Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      width = lvalue();
      asn = jj_consume_token(AGN);
      exp = expression();
      jj_consume_token(EOS);
                evaluateAssignment(asn, width, exp);
      break;
    case DEASSIGN:
      jj_consume_token(DEASSIGN);
      lvalue();
      jj_consume_token(EOS);
      break;
    case FORCE:
      jj_consume_token(FORCE);
      width = lvalue();
      asn = jj_consume_token(AGN);
      exp = expression();
      jj_consume_token(EOS);
                evaluateAssignment(asn, width, exp);
      break;
    case RELEASE:
      jj_consume_token(RELEASE);
      lvalue();
      jj_consume_token(EOS);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void proceduralTimingControlStatement() throws ParseException {
    delayOrEventControl();
    statement();
  }

  final public void ifStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement();
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
  }

  final public void caseStatement() throws ParseException {
    jj_consume_token(CASE);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        expression();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          expression();
        }
        jj_consume_token(COLON);
        statement();
        break;
      case DEFAULT_LABEL:
        jj_consume_token(DEFAULT_LABEL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          break;
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        statement();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_LABEL:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_20;
      }
    }
    jj_consume_token(ENDCASE);
  }

  final public void whileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void forStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    lvalue();
    jj_consume_token(AGN);
    expression();
    jj_consume_token(EOS);
    expression();
    jj_consume_token(EOS);
    lvalue();
    jj_consume_token(AGN);
    expression();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void foreverStatement() throws ParseException {
    jj_consume_token(FOREVER);
    statement();
  }

  final public void repeatStatement() throws ParseException {
    jj_consume_token(REPEAT);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void waitStatement() throws ParseException {
    jj_consume_token(WAIT);
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);
    statement();
  }

  final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case FORK:
      jj_consume_token(FORK);
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      identifier();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case REG:
        case WIRE:
        case EVENT:
        case GENVAR:
        case REAL:
        case PARAMETER:
        case LOCALPARAM:
        case TIME:
        case REALTIME:
        case SUPPLY:
        case NET_TYPE:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_22;
        }
        blockItem();
      }
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case FORK:
      case IF:
      case WHILE:
      case FOR:
      case FOREVER:
      case REPEAT:
      case WAIT:
      case CASE:
      case ASSIGN:
      case DEASSIGN:
      case FORCE:
      case RELEASE:
      case DISABLE:
      case LBRACE:
      case EOS:
      case PARA:
      case AT:
      case IDENT:
      case SYSTEM_IDENT:
      case 131:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_23;
      }
      statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
      jj_consume_token(END);
      break;
    case JOIN:
      jj_consume_token(JOIN);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void blockItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
    case LOCALPARAM:
      parameterDecl();
      break;
    case INTEGER:
    case REG:
    case WIRE:
    case EVENT:
    case GENVAR:
    case REAL:
    case TIME:
    case REALTIME:
    case SUPPLY:
    case NET_TYPE:
      variableDecl();
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void functionDecl() throws ParseException {
    jj_consume_token(FUNCTION);
                    begin(STATEMENT);
    function();
                                                   end(STATEMENT);
  }

  final public void taskDecl() throws ParseException {
    jj_consume_token(TASK);
                begin(STATEMENT);
    task();
                                           end(STATEMENT);
  }

  final public void function() throws ParseException {
        String range;
        Identifier name;
        Token end ;
    variableModifier();
    range = bitRange();
    name = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      skipTo(RPAREN);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    jj_consume_token(EOS);
                beginOutlineElement(name, "function#" + range);
    end = skipTo(ENDFUNCTION);
                endOutlineElement(end, name.image, "function#" + range);
                addCollapsible(name.beginLine, end.endLine);
  }

  final public void task() throws ParseException {
        Identifier name;
        Token end ;
    name = identifier();
    jj_consume_token(EOS);
                beginOutlineElement(name, "task#");
    end = skipTo(ENDTASK);
                endOutlineElement(end, name.image, "task#");
                addCollapsible(name.beginLine, end.endLine);
  }

  final public void generate() throws ParseException {
    jj_consume_token(GENERATE);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case IF:
      case FOR:
      case CASE:
      case FUNCTION:
      case TASK:
      case INTEGER:
      case REG:
      case WIRE:
      case EVENT:
      case GENVAR:
      case REAL:
      case PARAMETER:
      case LOCALPARAM:
      case ASSERT:
      case ASSIGN:
      case TIME:
      case REALTIME:
      case DEFPARAM:
      case OR:
      case ALWAYS:
      case INITIAL:
      case SUPPLY:
      case NET_TYPE:
      case PRIM_1IN_XOUT:
      case PRIM_1OUT_XIN:
      case PRIM_1OUT_1IN_1CNTL:
      case PRIM_1OUT:
      case PRIM_1OUT_1IN_NC_PC:
      case PRIM_BI:
      case EOS:
      case IDENT:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_24;
      }
      generateItem();
    }
    jj_consume_token(ENDGENERATE);
  }

  final public void generateItem() throws ParseException {
        Identifier block = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case TASK:
    case INTEGER:
    case REG:
    case WIRE:
    case EVENT:
    case GENVAR:
    case REAL:
    case PARAMETER:
    case LOCALPARAM:
    case ASSERT:
    case ASSIGN:
    case TIME:
    case REALTIME:
    case DEFPARAM:
    case OR:
    case ALWAYS:
    case INITIAL:
    case SUPPLY:
    case NET_TYPE:
    case PRIM_1IN_XOUT:
    case PRIM_1OUT_XIN:
    case PRIM_1OUT_1IN_1CNTL:
    case PRIM_1OUT:
    case PRIM_1OUT_1IN_NC_PC:
    case PRIM_BI:
    case EOS:
    case IDENT:
      moduleOrGenerateItem();
      break;
    case IF:
      generateIfStatement();
      break;
    case CASE:
      generateCaseStatement();
      break;
    case FOR:
      generateForStatement();
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        block = identifier();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
                        if (block != null)
                                beginGenerateBlock(block);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGIN:
        case IF:
        case FOR:
        case CASE:
        case FUNCTION:
        case TASK:
        case INTEGER:
        case REG:
        case WIRE:
        case EVENT:
        case GENVAR:
        case REAL:
        case PARAMETER:
        case LOCALPARAM:
        case ASSERT:
        case ASSIGN:
        case TIME:
        case REALTIME:
        case DEFPARAM:
        case OR:
        case ALWAYS:
        case INITIAL:
        case SUPPLY:
        case NET_TYPE:
        case PRIM_1IN_XOUT:
        case PRIM_1OUT_XIN:
        case PRIM_1OUT_1IN_1CNTL:
        case PRIM_1OUT:
        case PRIM_1OUT_1IN_NC_PC:
        case PRIM_BI:
        case EOS:
        case IDENT:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_25;
        }
        generateItem();
      }
      jj_consume_token(END);
                        if (block != null) {
                                endGenerateBlock(block);
                        }
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void generateIfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    constantExpression();
    jj_consume_token(RPAREN);
    generateItem();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      generateItem();
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
  }

  final public void generateCaseStatement() throws ParseException {
    jj_consume_token(CASE);
    jj_consume_token(LPAREN);
    constantExpression();
    jj_consume_token(RPAREN);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        constantExpression();
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[94] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          constantExpression();
        }
        jj_consume_token(COLON);
        generateItem();
        break;
      case DEFAULT_LABEL:
        jj_consume_token(DEFAULT_LABEL);
        jj_consume_token(COLON);
        generateItem();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_LABEL:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case NEG_AND:
      case NEG_OR:
      case NEG_XOR:
      case XOR_NEG:
      case IDENT:
      case SYSTEM_IDENT:
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_26;
      }
    }
    jj_consume_token(ENDCASE);
  }

  final public void generateForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    lvalue();
    jj_consume_token(AGN);
    expression();
    jj_consume_token(EOS);
    expression();
    jj_consume_token(EOS);
    lvalue();
    jj_consume_token(AGN);
    expression();
    jj_consume_token(RPAREN);
    generateItem();
  }

  final public String netType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WIRE:
      jj_consume_token(WIRE);
      break;
    case NET_TYPE:
      jj_consume_token(NET_TYPE);
      break;
    case SUPPLY:
      jj_consume_token(SUPPLY);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public void strength() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRENGTH:
      jj_consume_token(STRENGTH);
      break;
    case SUPPLY:
      jj_consume_token(SUPPLY);
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRENGTH:
        jj_consume_token(STRENGTH);
        break;
      case SUPPLY:
        jj_consume_token(SUPPLY);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public int lvalue() throws ParseException {
        int width;
        Identifier ident;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ident = complexIdentifier();
                variableAssignment(ident);
                {if (true) return ident.getWidth();}
      break;
    case LBRACE:
      width = lvalueConcatenation();
                {if (true) return width;}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int lvalueConcatenation() throws ParseException {
        int width;
        int ret;
    jj_consume_token(LBRACE);
    ret = lvalue();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      width = lvalue();
                        if (width == 0 || ret == 0)
                                ret = 0;
                        else
                                ret += width;
    }
    jj_consume_token(RBRACE);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier identifier() throws ParseException {
        Token token;
    token = jj_consume_token(IDENT);
                {if (true) return new Identifier(token);}
    throw new Error("Missing return statement in function");
  }

  final public Expression constantExpression() throws ParseException {
        Expression ret;
    ret = expression();
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
        Expression ret, exp1, exp2;
        Token op;
    ret = logicalOrExpresstion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      op = jj_consume_token(HOOK);
      exp1 = expression();
      jj_consume_token(COLON);
      exp2 = expression();
                        ret = operator(ret, op, exp1, exp2);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression logicalOrExpresstion() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = logicalAndExpresstion();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_29;
      }
      op = jj_consume_token(SC_OR);
      exp = logicalAndExpresstion();
                                                    ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression logicalAndExpresstion() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = bitOrExpresstion();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_30;
      }
      op = jj_consume_token(SC_AND);
      exp = bitOrExpresstion();
                                               ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression bitOrExpresstion() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = bitAndExpresstion();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_31;
      }
      op = jj_consume_token(BIT_OR);
      exp = bitAndExpresstion();
                                               ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression bitAndExpresstion() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = equalityExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
      case XOR:
      case NEG_XOR:
      case XOR_NEG:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        op = jj_consume_token(BIT_AND);
        break;
      case XOR:
        op = jj_consume_token(XOR);
        break;
      case NEG_XOR:
        op = jj_consume_token(NEG_XOR);
        break;
      case XOR_NEG:
        op = jj_consume_token(XOR_NEG);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = equalityExpression();
                                             ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression equalityExpression() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = relationalExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case EQ_C:
      case NE_C:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        op = jj_consume_token(EQ);
        break;
      case EQ_C:
        op = jj_consume_token(EQ_C);
        break;
      case NE:
        op = jj_consume_token(NE);
        break;
      case NE_C:
        op = jj_consume_token(NE_C);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = relationalExpression();
                                               ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression relationalExpression() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = shiftExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        op = jj_consume_token(LT);
        break;
      case LE:
        op = jj_consume_token(LE);
        break;
      case GT:
        op = jj_consume_token(GT);
        break;
      case GE:
        op = jj_consume_token(GE);
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = shiftExpression();
                                          ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression shiftExpression() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = addExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
      case ALSHIFT:
      case ARSHIFT:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        op = jj_consume_token(LSHIFT);
        break;
      case RSHIFT:
        op = jj_consume_token(RSHIFT);
        break;
      case ALSHIFT:
        op = jj_consume_token(ALSHIFT);
        break;
      case ARSHIFT:
        op = jj_consume_token(ARSHIFT);
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = addExpression();
                                        ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression addExpression() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = multiplyExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = multiplyExpression();
                                             ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplyExpression() throws ParseException {
        Expression ret, exp;
        Token op;
    ret = unaryExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
      case POWER:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        op = jj_consume_token(STAR);
        break;
      case SLASH:
        op = jj_consume_token(SLASH);
        break;
      case REM:
        op = jj_consume_token(REM);
        break;
      case POWER:
        op = jj_consume_token(POWER);
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = unaryExpression();
                                          ret = operator(ret, op, exp);
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression unaryExpression() throws ParseException {
        Expression ret, exp;
        Token op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case PLUS:
    case MINUS:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case NEG_AND:
    case NEG_OR:
    case NEG_XOR:
    case XOR_NEG:
      op = unaryOperator();
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    ret = primary();
                if (op != null)
                        {if (true) return operator(ret, op);}
                else
                        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression primary() throws ParseException {
        Expression ret;
        Identifier ident;
        boolean isFunc = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case REAL_LITERAL:
    case STRING_LITERAL:
      ret = number();
      break;
    case IDENT:
      ident = complexIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        functionArgs();
                                                         isFunc = true;
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
                        if (isFunc) {
                                ret = functionReference(ident);
                        } else {
                                ret = variableReference(ident);
                        }
      break;
    case SYSTEM_IDENT:
      jj_consume_token(SYSTEM_IDENT);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYSTEM_IDENT:
          ;
          break;
        default:
          jj_la1[121] = jj_gen;
          break label_38;
        }
        jj_consume_token(SYSTEM_IDENT);
      }
      if (jj_2_4(2)) {
        functionArgs();
      } else {
        ;
      }
                        ret = new Expression();
      break;
    case LBRACE:
      ret = concatenation();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      ret = minTypMaxExpresstion();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (ret == null)
                        {if (true) return new Expression();}
                else
                        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier complexIdentifier() throws ParseException {
        Identifier ident, concat;
    ident = identifier();
    bitOrAry(ident);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_39;
      }
      jj_consume_token(DOT);
      concat = identifier();
      bitOrAry(concat);
                        ident.endLine = concat.endLine;
                        ident.endColumn = concat.endColumn;
                        ident.image += "." + concat.image;
                        ident.setWidth(concat.getWidth());
                        ident.setDimension(concat.getDimension());
    }
                {if (true) return ident;}
    throw new Error("Missing return statement in function");
  }

  final public Expression minTypMaxExpresstion() throws ParseException {
        Expression exp;
    exp = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      expression();
      jj_consume_token(COLON);
      expression();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public void bitOrAry(Identifier ident) throws ParseException {
        int width = 0;
        int dim = 0;
        Expression msb, lsb;
        Token token;
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_40;
      }
      jj_consume_token(LBRACKET);
      msb = expression();
                                         width = 1;  dim++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case PCOLON:
      case MCOLON:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          token = jj_consume_token(COLON);
          break;
        case PCOLON:
          token = jj_consume_token(PCOLON);
          break;
        case MCOLON:
          token = jj_consume_token(MCOLON);
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        lsb = expression();
                                if (token.image.equals(":")) {
                                        if (msb.isValid() && lsb.isValid())
                                                width = msb.intValue() - lsb.intValue() + 1;
                                        else
                                                width = 0;
                                } else {
                                        if (lsb.isValid())
                                                width = lsb.intValue();
                                        else
                                                width = 0;
                                }
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    }
                ident.setWidth(width);
                ident.setDimension(dim);
  }

  final public String bitRange() throws ParseException {
        Expression msb, lsb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      msb = expression();
      jj_consume_token(COLON);
      lsb = expression();
      jj_consume_token(RBRACKET);
                        if (msb.isValid() && lsb.isValid())
                                {if (true) return "[" + msb.intValue() + ":" + lsb.intValue() + "]";}
                        else
                                {if (true) return "";}
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
                {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public Token unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case NEG_AND:
      jj_consume_token(NEG_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case NEG_OR:
      jj_consume_token(NEG_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NEG_XOR:
      jj_consume_token(NEG_XOR);
      break;
    case XOR_NEG:
      jj_consume_token(XOR_NEG);
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Expression concatenation() throws ParseException {
        int width;
        int value;
        boolean valid;
        boolean assignable;
        Expression exp;
        Expression refs = new Expression();
    jj_consume_token(LBRACE);
    exp = expression();
                width = exp.getWidth();
                value = exp.intValue();
                valid = exp.isValid();
                assignable = exp.isAssignable();
                refs.addReference(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
    case COMMA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_41:
        while (true) {
          jj_consume_token(COMMA);
          exp = expression();
                        if (width == 0 || exp.getWidth() == 0)
                                width = 0;
                        else
                                width += exp.getWidth();
                        value = (value << width) | exp.intValue();
                        valid = valid && exp.isValid();
                        assignable = assignable && exp.isAssignable();
                        refs.addReference(exp);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[130] = jj_gen;
            break label_41;
          }
        }
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        exp = expression();
        jj_consume_token(RBRACE);
                        width = valid ? value : 0;
                        value = exp.intValue();
                        valid = exp.isValid();
                        assignable = exp.isAssignable();
                        refs = exp;
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                Expression ret = new Expression(width);
                if (valid)
                        ret.setValue(value);
                ret.setAssignable(assignable);
                ret.addReference(refs);
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public void functionArgs() throws ParseException {
    jj_consume_token(LPAREN);
    expression();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      expression();
    }
    jj_consume_token(RPAREN);
  }

  final public Expression number() throws ParseException {
        Expression ret = new Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
                              ret.parseIntegerLiteral(token.image);
      break;
    case REAL_LITERAL:
      jj_consume_token(REAL_LITERAL);
                              ret.parseRealLiteral(token.image);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
                                ret.parseStringLiteral(token.image);
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  void unexpectedEof(Token token) throws ParseException {
        ParseException ex = new ParseException("unexpected EOF");
        ex.currentToken = token;
        throw ex;
  }

  Token skipTo(int skip) throws ParseException {
        Token current = token;
        Token token ;
        StringBuffer image = new StringBuffer();

        for(;;)
        {
                token = getToken(1);
                if (token.kind == EOF)
                        unexpectedEof(current);
                if (token.kind == skip)
                {
                        getNextToken();
                        break ;
                }

                image.append(token.image);
                getNextToken();
        }
        token.image = image.toString();
        return token ;
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(SYSTEM_IDENT)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(PARA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(EOS)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_44()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public VerilogParserCoreTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[135];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80080000,0x0,0x0,0x0,0x0,0x0,0x80080000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fa28000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x20000000,0x20000000,0x28000,0x0,0x0,0x1fa28000,0x50000,0x0,0x0,0x91208000,0x0,0x91208000,0x91208000,0x400000,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x4000,0x0,0x0,0xe0,0x0,0x6f1affea,0x12100,0x12100,0xe0,0x0,0xe0,0x6f1affea,0xf10ff02,0x60080000,0xe0,0x0,0x3012700,0x3012700,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x3003b00,0x3003f00,0x0,0x0,0x0,0x0,0x0,0xc000,0x0,0x60000000,0x10f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x8000000,0x8000000,0x80000000,0xf00000,0x0,0x0,0x0,0x0,0x0,0x0,0x300ff00,0x0,0x10f00000,0x0,0x300ff00,0x0,0x6f18ff02,0x0,0x6f18ff02,0x6f18ff02,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x80000,0x0,0x10000,0x80000,0x0,0x200,0x81fb,0x0,0x0,0x0,0x200000,0x0,0x81fb,0x1fb,0x8000,0x0,0x80000,0x0,0x0,0x200000,0x1f8,0x10000,0x0,0x80000,0x200,0x10000,0x3100a00,0x200,0x10200,0x3000a00,0x80000,0x3000a00,0x80000,0x3100a00,0x80000,0x3000a00,0x3100a00,0x200,0x10000,0x80000,0x200,0x0,0x10000,0x80000,0x0,0x3,0x2000,0x200000,0x80000,0x80000,0x200,0x0,0x80000,0x0,0x38800,0x80200000,0x30000,0x80000,0x200,0x80208200,0x80200000,0x30000,0x80000,0x200,0x800,0x30000,0x200,0x0,0x3000a00,0x200,0x3000a00,0x80000,0x80000,0x3000a00,0x0,0x0,0x80000,0x8000000,0x3000a00,0x3000a00,0x0,0x3,0x8000000,0x38800,0x0,0x3,0x200,0x81fb,0x8000000,0x81fb,0x81fb,0x0,0x80000,0x3000a00,0x3000a00,0x3,0x5,0x5,0x80000,0x800,0x80000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x80c00000,0x80c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x200,0x0,0xa00,0x100000,0x8000000,0x2000,0x38000000,0x38000000,0x2000,0x3000000,0x80000,0x80800,0x80800,0x80000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x800000,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x8800000,0x0,0x983c730,0x0,0x800000,0x983c730,0x0,0x983c730,0x0,0x983c730,0x0,0x983c730,0x983c730,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x8800000,0x8800000,0x983c770,0x800040,0x983c730,0x0,0x0,0x983c730,0x0,0x0,0x0,0x0,0x983c730,0x983c730,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x983c730,0x983c730,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x4,0x8,0x200,0x30500,0x30500,0xc0002,0xc0002,0x1,0x1,0x603000,0x603000,0x30,0x30,0x1008c0,0x1008c0,0x3c730,0x0,0x1000000,0x9800000,0x0,0x0,0x0,0x0,0x0,0x0,0x3c730,0x0,0x0,0x0,0x0,0x8000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x6,0x0,0x0,0x6,0x0,0x6,0x0,0x6,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x6,0x0,0x6,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public VerilogParserCore(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VerilogParserCore(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VerilogParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public VerilogParserCore(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new VerilogParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VerilogParserCore(VerilogParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VerilogParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 135; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[132];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 135; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
