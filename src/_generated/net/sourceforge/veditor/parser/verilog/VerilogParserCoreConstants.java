/* Generated By:JavaCC: Do not edit this line. VerilogParserCoreConstants.java */
package net.sourceforge.veditor.parser.verilog;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VerilogParserCoreConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int PROPERTY_COMMENT = 5;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 12;
  /** RegularExpression Id. */
  int MODULE = 13;
  /** RegularExpression Id. */
  int ENDMODULE = 14;
  /** RegularExpression Id. */
  int BEGIN = 15;
  /** RegularExpression Id. */
  int END = 16;
  /** RegularExpression Id. */
  int FORK = 17;
  /** RegularExpression Id. */
  int JOIN = 18;
  /** RegularExpression Id. */
  int SPECIFY = 19;
  /** RegularExpression Id. */
  int ENDSPECIFY = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int FOREVER = 25;
  /** RegularExpression Id. */
  int REPEAT = 26;
  /** RegularExpression Id. */
  int WAIT = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int DEFAULT_LABEL = 29;
  /** RegularExpression Id. */
  int ENDCASE = 30;
  /** RegularExpression Id. */
  int FUNCTION = 31;
  /** RegularExpression Id. */
  int ENDFUNCTION = 32;
  /** RegularExpression Id. */
  int TASK = 33;
  /** RegularExpression Id. */
  int ENDTASK = 34;
  /** RegularExpression Id. */
  int GENERATE = 35;
  /** RegularExpression Id. */
  int ENDGENERATE = 36;
  /** RegularExpression Id. */
  int INPUT = 37;
  /** RegularExpression Id. */
  int OUTPUT = 38;
  /** RegularExpression Id. */
  int INOUT = 39;
  /** RegularExpression Id. */
  int INTEGER = 40;
  /** RegularExpression Id. */
  int REG = 41;
  /** RegularExpression Id. */
  int WIRE = 42;
  /** RegularExpression Id. */
  int EVENT = 43;
  /** RegularExpression Id. */
  int GENVAR = 44;
  /** RegularExpression Id. */
  int REAL = 45;
  /** RegularExpression Id. */
  int PARAMETER = 46;
  /** RegularExpression Id. */
  int LOCALPARAM = 47;
  /** RegularExpression Id. */
  int SIGNED = 48;
  /** RegularExpression Id. */
  int PROPERTY = 49;
  /** RegularExpression Id. */
  int ENDPROPERTY = 50;
  /** RegularExpression Id. */
  int ASSERT = 51;
  /** RegularExpression Id. */
  int ASSIGN = 52;
  /** RegularExpression Id. */
  int DEASSIGN = 53;
  /** RegularExpression Id. */
  int FORCE = 54;
  /** RegularExpression Id. */
  int RELEASE = 55;
  /** RegularExpression Id. */
  int TIME = 56;
  /** RegularExpression Id. */
  int REALTIME = 57;
  /** RegularExpression Id. */
  int DEFPARAM = 58;
  /** RegularExpression Id. */
  int OR = 59;
  /** RegularExpression Id. */
  int DISABLE = 60;
  /** RegularExpression Id. */
  int ALWAYS = 61;
  /** RegularExpression Id. */
  int INITIAL = 62;
  /** RegularExpression Id. */
  int EDGE = 63;
  /** RegularExpression Id. */
  int SUPPLY = 64;
  /** RegularExpression Id. */
  int NET_TYPE = 65;
  /** RegularExpression Id. */
  int STRENGTH = 66;
  /** RegularExpression Id. */
  int PRIM_1IN_XOUT = 67;
  /** RegularExpression Id. */
  int PRIM_1OUT_XIN = 68;
  /** RegularExpression Id. */
  int PRIM_1OUT_1IN_1CNTL = 69;
  /** RegularExpression Id. */
  int PRIM_1OUT = 70;
  /** RegularExpression Id. */
  int PRIM_1OUT_1IN_NC_PC = 71;
  /** RegularExpression Id. */
  int PRIM_BI = 72;
  /** RegularExpression Id. */
  int LPAREN = 73;
  /** RegularExpression Id. */
  int RPAREN = 74;
  /** RegularExpression Id. */
  int LBRACE = 75;
  /** RegularExpression Id. */
  int RBRACE = 76;
  /** RegularExpression Id. */
  int LBRACKET = 77;
  /** RegularExpression Id. */
  int RBRACKET = 78;
  /** RegularExpression Id. */
  int EOS = 79;
  /** RegularExpression Id. */
  int PARA = 80;
  /** RegularExpression Id. */
  int AT = 81;
  /** RegularExpression Id. */
  int DOLLAR = 82;
  /** RegularExpression Id. */
  int COMMA = 83;
  /** RegularExpression Id. */
  int DOT = 84;
  /** RegularExpression Id. */
  int AGN = 85;
  /** RegularExpression Id. */
  int GT = 86;
  /** RegularExpression Id. */
  int LT = 87;
  /** RegularExpression Id. */
  int BANG = 88;
  /** RegularExpression Id. */
  int TILDE = 89;
  /** RegularExpression Id. */
  int HOOK = 90;
  /** RegularExpression Id. */
  int COLON = 91;
  /** RegularExpression Id. */
  int PCOLON = 92;
  /** RegularExpression Id. */
  int MCOLON = 93;
  /** RegularExpression Id. */
  int EQ = 94;
  /** RegularExpression Id. */
  int LE = 95;
  /** RegularExpression Id. */
  int GE = 96;
  /** RegularExpression Id. */
  int NE = 97;
  /** RegularExpression Id. */
  int SC_OR = 98;
  /** RegularExpression Id. */
  int SC_AND = 99;
  /** RegularExpression Id. */
  int PLUS = 100;
  /** RegularExpression Id. */
  int MINUS = 101;
  /** RegularExpression Id. */
  int STAR = 102;
  /** RegularExpression Id. */
  int SLASH = 103;
  /** RegularExpression Id. */
  int BIT_AND = 104;
  /** RegularExpression Id. */
  int BIT_OR = 105;
  /** RegularExpression Id. */
  int XOR = 106;
  /** RegularExpression Id. */
  int REM = 107;
  /** RegularExpression Id. */
  int LSHIFT = 108;
  /** RegularExpression Id. */
  int RSHIFT = 109;
  /** RegularExpression Id. */
  int NEG_AND = 110;
  /** RegularExpression Id. */
  int NEG_OR = 111;
  /** RegularExpression Id. */
  int NEG_XOR = 112;
  /** RegularExpression Id. */
  int XOR_NEG = 113;
  /** RegularExpression Id. */
  int EQ_C = 114;
  /** RegularExpression Id. */
  int NE_C = 115;
  /** RegularExpression Id. */
  int POWER = 116;
  /** RegularExpression Id. */
  int ALSHIFT = 117;
  /** RegularExpression Id. */
  int ARSHIFT = 118;
  /** RegularExpression Id. */
  int IDENT = 119;
  /** RegularExpression Id. */
  int SYSTEM_IDENT = 120;
  /** RegularExpression Id. */
  int LETTER = 121;
  /** RegularExpression Id. */
  int BACKSLASH = 122;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 123;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 124;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 125;
  /** RegularExpression Id. */
  int HEX_LITERAL = 126;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 127;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 128;
  /** RegularExpression Id. */
  int REAL_LITERAL = 129;
  /** RegularExpression Id. */
  int STRING_LITERAL = 130;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_PROPERTY = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 3>",
    "<token of kind 4>",
    "\"*)\"",
    "<token of kind 6>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"module\"",
    "\"endmodule\"",
    "\"begin\"",
    "\"end\"",
    "\"fork\"",
    "\"join\"",
    "\"specify\"",
    "\"endspecify\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"forever\"",
    "\"repeat\"",
    "\"wait\"",
    "<CASE>",
    "\"default\"",
    "\"endcase\"",
    "\"function\"",
    "\"endfunction\"",
    "\"task\"",
    "\"endtask\"",
    "\"generate\"",
    "\"endgenerate\"",
    "\"input\"",
    "\"output\"",
    "\"inout\"",
    "\"integer\"",
    "\"reg\"",
    "\"wire\"",
    "\"event\"",
    "\"genvar\"",
    "\"real\"",
    "\"parameter\"",
    "\"localparam\"",
    "\"signed\"",
    "\"property\"",
    "\"endproperty\"",
    "<ASSERT>",
    "\"assign\"",
    "\"deassign\"",
    "\"force\"",
    "\"release\"",
    "\"time\"",
    "\"realtime\"",
    "\"defparam\"",
    "\"or\"",
    "\"disable\"",
    "\"always\"",
    "\"initial\"",
    "<EDGE>",
    "<SUPPLY>",
    "<NET_TYPE>",
    "<STRENGTH>",
    "<PRIM_1IN_XOUT>",
    "<PRIM_1OUT_XIN>",
    "<PRIM_1OUT_1IN_1CNTL>",
    "<PRIM_1OUT>",
    "<PRIM_1OUT_1IN_NC_PC>",
    "<PRIM_BI>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\"#\"",
    "\"@\"",
    "\"$\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"+:\"",
    "\"-:\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"~&\"",
    "\"~|\"",
    "\"~^\"",
    "\"^~\"",
    "\"===\"",
    "\"!==\"",
    "\"**\"",
    "\"<<<\"",
    "\">>>\"",
    "<IDENT>",
    "<SYSTEM_IDENT>",
    "<LETTER>",
    "\"\\\\\"",
    "<INTEGER_LITERAL>",
    "<NUMBER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<REAL_LITERAL>",
    "<STRING_LITERAL>",
    "\"->\"",
  };

}
