/* Generated By:JJTree&JavaCC: Do not edit this line. VhdlParserCore.java */
package net.sourceforge.veditor.parser.vhdl;

@SuppressWarnings("all")

public class VhdlParserCore/*@bgen(jjtree)*/implements VhdlParserCoreTreeConstants, VhdlParserCoreConstants {/*@bgen(jjtree)*/
  protected JJTVhdlParserCoreState jjtree = new JJTVhdlParserCoreState();/**
   * Called, whenever a new node in jjtree is generated.
   * - store first token of the production.
   * - check, if production is supported in subsets that are to be
   *   checked.
   */
   void jjtreeOpenNodeScope(Node n)
  {

    ((SimpleNode) n).setFirstToken(getToken(1));
    ((SimpleNode) n).setParser(this);
  }

  /**
   * Called, whenever a node in jjtree is closed.
   */
   void jjtreeCloseNodeScope(Node n)
  {
    ((SimpleNode) n).setLastToken(getToken(0));
  }

  public ErrorHandler getErrorHandler(){
        return errs;
  }

  public SymbolTable getSymbolTable(){
        return m_SymbolTable;
  }

  public void setSymbolTable(SymbolTable symbolTable){
    m_SymbolTable=symbolTable;
  }

  ErrorHandler errs = new ErrorHandler(this);
  SymbolTable m_SymbolTable=null;

  final public void abstract_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case decimal_literal:
      jj_consume_token(decimal_literal);
      break;
    case based_literal:
      jj_consume_token(based_literal);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void access_type_definition() throws ParseException {
    jj_consume_token(ACCESS);
    subtype_indication();
  }

  final public void actual_designator() throws ParseException {
    if (jj_2_1(2147483647)) {
      expression();
    } else if (jj_2_2(2147483647)) {
      signal_name();
    } else if (jj_2_3(2147483647)) {
      variable_name();
    } else if (jj_2_4(2147483647)) {
      file_name();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
        jj_consume_token(OPEN);
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_5(2147483647)) {
          terminal_name();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case basic_identifier:
          case extended_identifier:
          case string_literal:
            quantity_name();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void actual_parameter_part() throws ParseException {
    parameter_association_list();
  }

  final public void actual_part() throws ParseException {
 /*@bgen(jjtree) actual_part */
  ASTactual_part jjtn000 = new ASTactual_part(JJTACTUAL_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_6(2147483647)) {
        function_name();
        jj_consume_token(158);
        actual_designator();
        jj_consume_token(159);
      } else if (jj_2_7(2147483647)) {
        type_mark();
        jj_consume_token(158);
        actual_designator();
        jj_consume_token(159);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case NEW:
        case NOT:
        case NULL:
        case OPEN:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          actual_designator();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public int adding_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
                          {if (true) return ADD;}
      break;
    case SUB:
      jj_consume_token(SUB);
                          {if (true) return SUB;}
      break;
    case CONCAT:
      jj_consume_token(CONCAT);
                          {if (true) return CONCAT;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void aggregate() throws ParseException {
 /*@bgen(jjtree) aggregate */
  ASTaggregate jjtn000 = new ASTaggregate(JJTAGGREGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(158);
      element_association();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        jj_consume_token(160);
        element_association();
      }
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void alias_declaration() throws ParseException {
 /*@bgen(jjtree) alias_declaration */
  ASTalias_declaration jjtn000 = new ASTalias_declaration(JJTALIAS_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ALIAS);
      alias_designator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        subtype_indication();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(IS);
      name();
      signature();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void alias_designator() throws ParseException {
 /*@bgen(jjtree) alias_designator */
  ASTalias_designator jjtn000 = new ASTalias_designator(JJTALIAS_DESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        identifier();
        break;
      case character_literal:
        jj_consume_token(character_literal);
        break;
      case string_literal:
        operator_symbol();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void allocator() throws ParseException {
 /*@bgen(jjtree) allocator */
  ASTallocator jjtn000 = new ASTallocator(JJTALLOCATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      if (jj_2_8(2147483647)) {
        qualified_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          subtype_indication();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void architecture_body() throws ParseException {
 /*@bgen(jjtree) architecture_body */
  ASTarchitecture_body jjtn000 = new ASTarchitecture_body(JJTARCHITECTURE_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARCHITECTURE);
      identifier();
      jj_consume_token(OF);
      entity_name();
      jj_consume_token(IS);
                                                        jjtn000.newBlock();
      architecture_declarative_part();
      jj_consume_token(BEGIN);
      architecture_statement_part();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARCHITECTURE:
        jj_consume_token(ARCHITECTURE);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        architecture_simple_name();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.endBlock();
    jjtn000.Check();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void architecture_declarative_part() throws ParseException {
 /*@bgen(jjtree) architecture_declarative_part */
  ASTarchitecture_declarative_part jjtn000 = new ASTarchitecture_declarative_part(JJTARCHITECTURE_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case COMPONENT:
        case CONSTANT:
        case DISCONNECT:
        case FILE:
        case FOR:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case NATURE:
        case PROCEDURE:
        case PURE:
        case QUANTITY:
        case SIGNAL:
        case SHARED:
        case SUBNATURE:
        case SUBTYPE:
        case TERMINAL:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        block_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void architecture_statement_part() throws ParseException {
 /*@bgen(jjtree) architecture_statement_part */
  ASTarchitecture_statement_part jjtn000 = new ASTarchitecture_statement_part(JJTARCHITECTURE_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case ASSERT:
        case BREAK:
        case CASE:
        case IF:
        case IMPURE:
        case NEW:
        case NOT:
        case NULL:
        case POSTPONED:
        case PROCEDURAL:
        case PROCESS:
        case PURE:
        case WITH:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        architecture_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 *  This rule also contains the concurrent statements.
 */
  final public void architecture_statement() throws ParseException {
    try {
      if (jj_2_9(2147483647)) {
        block_statement();
      } else if (jj_2_10(2147483647)) {
        process_statement();
      } else if (jj_2_11(2147483647)) {
        concurrent_procedure_call_statement();
      } else if (jj_2_12(2147483647)) {
        concurrent_assertion_statement();
      } else if (jj_2_13(2147483647)) {
        concurrent_signal_assignment_statement();
      } else if (jj_2_14(2147483647)) {
        component_instantiation_statement();
      } else if (jj_2_15(2147483647)) {
        generate_statement();
      } else if (jj_2_16(2147483647)) {
        concurrent_break_statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case CASE:
        case IF:
        case IMPURE:
        case NEW:
        case NOT:
        case NULL:
        case PROCEDURAL:
        case PURE:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          simultaneous_statement();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in statement");
    }
  }

/**
 * 1076.1 extension:
 */
  final public void array_nature_definition() throws ParseException {
    if (jj_2_17(2147483647)) {
      unconstrained_nature_definition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        constrained_nature_definition();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
  * 1076.1 extension:
  */
  final public void unconstrained_nature_definition() throws ParseException {
 /*@bgen(jjtree) unconstrained_nature_definition */
  ASTunconstrained_nature_definition jjtn000 = new ASTunconstrained_nature_definition(JJTUNCONSTRAINED_NATURE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      jj_consume_token(158);
      index_subtype_definition();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(160);
        index_subtype_definition();
      }
      jj_consume_token(159);
      jj_consume_token(OF);
      subnature_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
  * 1076.1 extension:
  */
  final public void constrained_nature_definition() throws ParseException {
 /*@bgen(jjtree) constrained_nature_definition */
  ASTconstrained_nature_definition jjtn000 = new ASTconstrained_nature_definition(JJTCONSTRAINED_NATURE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      index_constraint();
      jj_consume_token(OF);
      subnature_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void array_type_definition() throws ParseException {
    if (jj_2_18(2147483647)) {
      unconstrained_array_definition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        constrained_array_definition();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void assertion() throws ParseException {
 /*@bgen(jjtree) assertion */
  ASTassertion jjtn000 = new ASTassertion(JJTASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ASSERT);
      condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPORT:
        jj_consume_token(REPORT);
        expression();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEVERITY:
        jj_consume_token(SEVERITY);
        expression();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void assertion_statement() throws ParseException {
 /*@bgen(jjtree) assertion_statement */
  ASTassertion_statement jjtn000 = new ASTassertion_statement(JJTASSERTION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      assertion();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void association_element() throws ParseException {
 /*@bgen(jjtree) association_element */
  ASTassociation_element jjtn000 = new ASTassociation_element(JJTASSOCIATION_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_19(2147483647)) {
        formal_part();
        jj_consume_token(RARROW);
      } else {
        ;
      }
      actual_part();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void association_list() throws ParseException {
 /*@bgen(jjtree) association_list */
  ASTassociation_list jjtn000 = new ASTassociation_list(JJTASSOCIATION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      association_element();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
        jj_consume_token(160);
        association_element();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void attribute_declaration() throws ParseException {
 /*@bgen(jjtree) attribute_declaration */
  ASTattribute_declaration jjtn000 = new ASTattribute_declaration(JJTATTRIBUTE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ATTRIBUTE);
      identifier();
      jj_consume_token(COLON);
      type_mark();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void attribute_designator() throws ParseException {
    attribute_simple_name();
  }

  final public void attribute_name() throws ParseException {
 /*@bgen(jjtree) attribute_name */
  ASTattribute_name jjtn000 = new ASTattribute_name(JJTATTRIBUTE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      prefix();
      signature();
      jj_consume_token(161);
      attribute_designator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        expression();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_6;
          }
          jj_consume_token(160);
          expression();
        }
        jj_consume_token(159);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void attribute_specification() throws ParseException {
 /*@bgen(jjtree) attribute_specification */
  ASTattribute_specification jjtn000 = new ASTattribute_specification(JJTATTRIBUTE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ATTRIBUTE);
      attribute_designator();
      jj_consume_token(OF);
      entity_specification();
      jj_consume_token(IS);
      expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void base_unit_declaration() throws ParseException {
    identifier();
    jj_consume_token(SEMICOLON);
  }

  final public void binding_indication() throws ParseException {
 /*@bgen(jjtree) binding_indication */
  ASTbinding_indication jjtn000 = new ASTbinding_indication(JJTBINDING_INDICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USE:
        jj_consume_token(USE);
        entity_aspect();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        generic_map_aspect();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        port_map_aspect();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void block_configuration() throws ParseException {
 /*@bgen(jjtree) block_configuration */
  ASTblock_configuration jjtn000 = new ASTblock_configuration(JJTBLOCK_CONFIGURATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      block_specification();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USE:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_7;
        }
        use_clause();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        configuration_item();
      }
      jj_consume_token(END);
      jj_consume_token(FOR);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void block_declarative_item() throws ParseException {
    try {
      if (jj_2_20(2147483647)) {
        subprogram_declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case IMPURE:
        case PROCEDURE:
        case PURE:
          subprogram_body();
          break;
        case TYPE:
          type_declaration();
          break;
        case SUBTYPE:
          subtype_declaration();
          break;
        case CONSTANT:
          constant_declaration();
          break;
        case SIGNAL:
          signal_declaration();
          break;
        case SHARED:
        case VARIABLE:
          shared_variable_declaration();
          break;
        case FILE:
          file_declaration();
          break;
        case ALIAS:
          alias_declaration();
          break;
        case COMPONENT:
          component_declaration();
          break;
        default:
          jj_la1[28] = jj_gen;
          if (jj_2_21(2147483647)) {
            attribute_declaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ATTRIBUTE:
              attribute_specification();
              break;
            case FOR:
              configuration_specification();
              break;
            case DISCONNECT:
              disconnection_specification();
              break;
            case USE:
              use_clause();
              break;
            default:
              jj_la1[29] = jj_gen;
              if (jj_2_22(2147483647)) {
                group_template_declaration();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case GROUP:
                  group_declaration();
                  break;
                case NATURE:
                  nature_declaration();
                  break;
                case SUBNATURE:
                  subnature_declaration();
                  break;
                case QUANTITY:
                  quantity_declaration();
                  break;
                case TERMINAL:
                  terminal_declaration();
                  break;
                default:
                  jj_la1[30] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declarative item");
    }
  }

  final public void block_declarative_part() throws ParseException {
 /*@bgen(jjtree) block_declarative_part */
  ASTblock_declarative_part jjtn000 = new ASTblock_declarative_part(JJTBLOCK_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case COMPONENT:
        case CONSTANT:
        case DISCONNECT:
        case FILE:
        case FOR:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case NATURE:
        case PROCEDURE:
        case PURE:
        case QUANTITY:
        case SIGNAL:
        case SHARED:
        case SUBNATURE:
        case SUBTYPE:
        case TERMINAL:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_9;
        }
        block_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void block_header() throws ParseException {
 /*@bgen(jjtree) block_header */
  ASTblock_header jjtn000 = new ASTblock_header(JJTBLOCK_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        generic_clause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GENERIC:
          generic_map_aspect();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        port_clause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PORT:
          port_map_aspect();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void block_specification() throws ParseException {
 /*@bgen(jjtree) block_specification */
  ASTblock_specification jjtn000 = new ASTblock_specification(JJTBLOCK_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_23(2147483647)) {
        architecture_name();
      } else if (jj_2_24(2147483647)) {
        block_statement_label();
      } else if (jj_2_25(2147483647)) {
        generate_statement_label();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          index_specification();
          jj_consume_token(159);
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void block_statement() throws ParseException {
 /*@bgen(jjtree) block_statement */
  ASTblock_statement jjtn000 = new ASTblock_statement(JJTBLOCK_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      block_label();
      jj_consume_token(COLON);
      jj_consume_token(BLOCK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        guard_expression();
        jj_consume_token(159);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      block_header();
      block_declarative_part();
      jj_consume_token(BEGIN);
      block_statement_part();
      jj_consume_token(END);
      jj_consume_token(BLOCK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        block_label();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void block_statement_part() throws ParseException {
 /*@bgen(jjtree) block_statement_part */
  ASTblock_statement_part jjtn000 = new ASTblock_statement_part(JJTBLOCK_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case ASSERT:
        case BREAK:
        case CASE:
        case IF:
        case IMPURE:
        case NEW:
        case NOT:
        case NULL:
        case POSTPONED:
        case PROCEDURAL:
        case PROCESS:
        case PURE:
        case WITH:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
        architecture_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * Section 8.14: Break statement
 * 1076.1 extension:
 */
  final public void break_statement() throws ParseException {
 /*@bgen(jjtree) break_statement */
  ASTbreak_statement jjtn000 = new ASTbreak_statement(JJTBREAK_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        break_list();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        condition();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void break_list() throws ParseException {
 /*@bgen(jjtree) break_list */
  ASTbreak_list jjtn000 = new ASTbreak_list(JJTBREAK_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      break_element();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_11;
        }
        jj_consume_token(160);
        break_element();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void break_element() throws ParseException {
 /*@bgen(jjtree) break_element */
  ASTbreak_element jjtn000 = new ASTbreak_element(JJTBREAK_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        selector_clause();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      quantity_name();
      jj_consume_token(RARROW);
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void selector_clause() throws ParseException {
    jj_consume_token(FOR);
    quantity_name();
    jj_consume_token(USE);
  }

  final public void case_statement() throws ParseException {
 /*@bgen(jjtree) case_statement */
  ASTcase_statement jjtn000 = new ASTcase_statement(JJTCASE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        case_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(CASE);
      expression();
      jj_consume_token(IS);
      case_statement_alternative();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHEN:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_12;
        }
        case_statement_alternative();
      }
      jj_consume_token(END);
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        case_label();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void case_statement_alternative() throws ParseException {
 /*@bgen(jjtree) case_statement_alternative */
  ASTcase_statement_alternative jjtn000 = new ASTcase_statement_alternative(JJTCASE_STATEMENT_ALTERNATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHEN);
      choices();
      jj_consume_token(RARROW);
      sequence_of_statements();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void choice() throws ParseException {
 /*@bgen(jjtree) choice */
  ASTchoice jjtn000 = new ASTchoice(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_26(2147483647)) {
        discrete_range();
      } else if (jj_2_27(2147483647)) {
        simple_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
          element_simple_name();
          break;
        case OTHERS:
          jj_consume_token(OTHERS);
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void choices() throws ParseException {
 /*@bgen(jjtree) choices */
  ASTchoices jjtn000 = new ASTchoices(JJTCHOICES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      choice();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 162:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_13;
        }
        jj_consume_token(162);
        choice();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void component_configuration() throws ParseException {
 /*@bgen(jjtree) component_configuration */
  ASTcomponent_configuration jjtn000 = new ASTcomponent_configuration(JJTCOMPONENT_CONFIGURATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      component_specification();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
      case PORT:
      case USE:
      case SEMICOLON:
        binding_indication();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        block_configuration();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(FOR);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void component_declaration() throws ParseException {
 /*@bgen(jjtree) component_declaration */
  ASTcomponent_declaration jjtn000 = new ASTcomponent_declaration(JJTCOMPONENT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(COMPONENT);
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        local_generic_clause();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        local_port_clause();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(COMPONENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        component_simple_name();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void component_instantiation_statement() throws ParseException {
 /*@bgen(jjtree) component_instantiation_statement */
  ASTcomponent_instantiation_statement jjtn000 = new ASTcomponent_instantiation_statement(JJTCOMPONENT_INSTANTIATION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      instantiation_label();
      jj_consume_token(COLON);
      instantiated_unit();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        generic_map_aspect();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        port_map_aspect();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// 1076.1 - extension:
  final public void composite_nature_definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      array_nature_definition();
      break;
    case RECORD:
      record_nature_definition();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void component_specification() throws ParseException {
 /*@bgen(jjtree) component_specification */
  ASTcomponent_specification jjtn000 = new ASTcomponent_specification(JJTCOMPONENT_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      instantiation_list();
      jj_consume_token(COLON);
      component_name();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void composite_type_definition() throws ParseException {
 /*@bgen(jjtree) composite_type_definition */
  ASTcomposite_type_definition jjtn000 = new ASTcomposite_type_definition(JJTCOMPOSITE_TYPE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        array_type_definition();
        break;
      case RECORD:
        record_type_definition();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void concurrent_assertion_statement() throws ParseException {
 /*@bgen(jjtree) concurrent_assertion_statement */
  ASTconcurrent_assertion_statement jjtn000 = new ASTconcurrent_assertion_statement(JJTCONCURRENT_ASSERTION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
        jj_consume_token(POSTPONED);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      assertion();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void concurrent_procedure_call_statement() throws ParseException {
 /*@bgen(jjtree) concurrent_procedure_call_statement */
  ASTconcurrent_procedure_call_statement jjtn000 = new ASTconcurrent_procedure_call_statement(JJTCONCURRENT_PROCEDURE_CALL_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_28(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
        jj_consume_token(POSTPONED);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      procedure_call();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void concurrent_signal_assignment_statement() throws ParseException {
 /*@bgen(jjtree) concurrent_signal_assignment_statement */
  ASTconcurrent_signal_assignment_statement jjtn000 = new ASTconcurrent_signal_assignment_statement(JJTCONCURRENT_SIGNAL_ASSIGNMENT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_29(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
        jj_consume_token(POSTPONED);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      if (jj_2_30(2147483647)) {
        conditional_signal_assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITH:
          selected_signal_assignment();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void condition() throws ParseException {
    boolean_expression();
  }

  final public void condition_clause() throws ParseException {
    jj_consume_token(UNTIL);
    condition();
  }

  final public void conditional_signal_assignment() throws ParseException {
 /*@bgen(jjtree) conditional_signal_assignment */
  ASTconditional_signal_assignment jjtn000 = new ASTconditional_signal_assignment(JJTCONDITIONAL_SIGNAL_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      target();
      jj_consume_token(LE);
      options_();
      conditional_waveforms();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void conditional_waveforms() throws ParseException {
 /*@bgen(jjtree) conditional_waveforms */
  ASTconditional_waveforms jjtn000 = new ASTconditional_waveforms(JJTCONDITIONAL_WAVEFORMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      waveform();
      label_14:
      while (true) {
        if (jj_2_31(2147483647)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(WHEN);
        condition();
        jj_consume_token(ELSE);
        waveform();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        condition();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void configuration_declaration() throws ParseException {
 /*@bgen(jjtree) configuration_declaration */
  ASTconfiguration_declaration jjtn000 = new ASTconfiguration_declaration(JJTCONFIGURATION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONFIGURATION);
      identifier();
      jj_consume_token(OF);
      entity_name();
      jj_consume_token(IS);
      configuration_declarative_part();
      block_configuration();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONFIGURATION:
        jj_consume_token(CONFIGURATION);
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        configuration_simple_name();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void configuration_declarative_item() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USE:
        use_clause();
        break;
      case ATTRIBUTE:
        attribute_specification();
        break;
      case GROUP:
        group_declaration();
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declarative item");
    }
  }

  final public void configuration_declarative_part() throws ParseException {
 /*@bgen(jjtree) configuration_declarative_part */
  ASTconfiguration_declarative_part jjtn000 = new ASTconfiguration_declarative_part(JJTCONFIGURATION_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTE:
        case GROUP:
        case USE:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_15;
        }
        configuration_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void configuration_item() throws ParseException {
    if (jj_2_32(2147483647)) {
      block_configuration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        component_configuration();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void configuration_specification() throws ParseException {
 /*@bgen(jjtree) configuration_specification */
  ASTconfiguration_specification jjtn000 = new ASTconfiguration_specification(JJTCONFIGURATION_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      component_specification();
      binding_indication();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void constant_declaration() throws ParseException {
 /*@bgen(jjtree) constant_declaration */
  ASTconstant_declaration jjtn000 = new ASTconstant_declaration(JJTCONSTANT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTANT);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void constrained_array_definition() throws ParseException {
 /*@bgen(jjtree) constrained_array_definition */
  ASTconstrained_array_definition jjtn000 = new ASTconstrained_array_definition(JJTCONSTRAINED_ARRAY_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      index_constraint();
      jj_consume_token(OF);
      element_subtype_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void constraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE:
      range_constraint();
      break;
    case 158:
      index_constraint();
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void context_clause() throws ParseException {
 /*@bgen(jjtree) context_clause */
  ASTcontext_clause jjtn000 = new ASTcontext_clause(JJTCONTEXT_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIBRARY:
        case USE:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_16;
        }
        context_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void context_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIBRARY:
      library_clause();
      break;
    case USE:
      use_clause();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/** 
 * Section 4:
 * Declarations
 */


/**
 * 1076.1 extension:
 */
  final public void terminal_declaration() throws ParseException {
 /*@bgen(jjtree) terminal_declaration */
  ASTterminal_declaration jjtn000 = new ASTterminal_declaration(JJTTERMINAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TERMINAL);
      identifier_list();
      jj_consume_token(COLON);
      subnature_indication();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void terminal_aspect() throws ParseException {
 /*@bgen(jjtree) terminal_aspect */
  ASTterminal_aspect jjtn000 = new ASTterminal_aspect(JJTTERMINAL_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      plus_terminal_name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        minus_terminal_name();
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void delay_mechanism() throws ParseException {
 /*@bgen(jjtree) delay_mechanism */
  ASTdelay_mechanism jjtn000 = new ASTdelay_mechanism(JJTDELAY_MECHANISM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRANSPORT:
        jj_consume_token(TRANSPORT);
        break;
      case INERTIAL:
      case REJECT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REJECT:
          jj_consume_token(REJECT);
          time_expression();
          break;
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        jj_consume_token(INERTIAL);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public ASTdesign_file design_file() throws ParseException {
 /*@bgen(jjtree) design_file */
  ASTdesign_file jjtn000 = new ASTdesign_file(JJTDESIGN_FILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARCHITECTURE:
        case CONFIGURATION:
        case ENTITY:
        case LIBRARY:
        case PACKAGE:
        case USE:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_17;
        }
        design_unit();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void design_unit() throws ParseException {
 /*@bgen(jjtree) design_unit */
  ASTdesign_unit jjtn000 = new ASTdesign_unit(JJTDESIGN_UNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      context_clause();
      library_unit();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void designator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    case string_literal:
      operator_symbol();
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void direction() throws ParseException {
 /*@bgen(jjtree) direction */
  ASTdirection jjtn000 = new ASTdirection(JJTDIRECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
        jj_consume_token(TO);
        break;
      case DOWNTO:
        jj_consume_token(DOWNTO);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void disconnection_specification() throws ParseException {
 /*@bgen(jjtree) disconnection_specification */
  ASTdisconnection_specification jjtn000 = new ASTdisconnection_specification(JJTDISCONNECTION_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DISCONNECT);
      guarded_signal_specification();
      jj_consume_token(AFTER);
      time_expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void discrete_range() throws ParseException {
    if (jj_2_33(2147483647)) {
      range();
    } else if (jj_2_34(2147483647)) {
      discrete_subtype_indication();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABS:
      case NEW:
      case NOT:
      case NULL:
      case based_literal:
      case basic_identifier:
      case bit_string_literal:
      case character_literal:
      case decimal_literal:
      case extended_identifier:
      case string_literal:
      case ADD:
      case SUB:
      case 158:
        range();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void element_association() throws ParseException {
    if (jj_2_35(2147483647)) {
      choices();
      jj_consume_token(RARROW);
    } else {
      ;
    }
    expression();
  }

  final public void element_declaration() throws ParseException {
 /*@bgen(jjtree) element_declaration */
  ASTelement_declaration jjtn000 = new ASTelement_declaration(JJTELEMENT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier_list();
      jj_consume_token(COLON);
      element_subtype_definition();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void element_subtype_definition() throws ParseException {
    subtype_indication();
  }

  final public void entity_aspect() throws ParseException {
 /*@bgen(jjtree) entity_aspect */
  ASTentity_aspect jjtn000 = new ASTentity_aspect(JJTENTITY_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTITY:
        jj_consume_token(ENTITY);
        entity_name();
        if (jj_2_36(2147483647)) {
          jj_consume_token(158);
          architecture_identifier();
          jj_consume_token(159);
        } else {
          ;
        }
        break;
      case CONFIGURATION:
        jj_consume_token(CONFIGURATION);
        configuration_name();
        break;
      case OPEN:
        jj_consume_token(OPEN);
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/**
 * Section 5: Specifications
 */
  final public int entity_class() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTITY:
      jj_consume_token(ENTITY);
                                  {if (true) return ENTITY;}
      break;
    case ARCHITECTURE:
      jj_consume_token(ARCHITECTURE);
                                  {if (true) return ARCHITECTURE;}
      break;
    case CONFIGURATION:
      jj_consume_token(CONFIGURATION);
                                  {if (true) return CONFIGURATION;}
      break;
    case PROCEDURE:
      jj_consume_token(PROCEDURE);
                                  {if (true) return PROCEDURE;}
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
                                  {if (true) return FUNCTION;}
      break;
    case PACKAGE:
      jj_consume_token(PACKAGE);
                                  {if (true) return PACKAGE;}
      break;
    case TYPE:
      jj_consume_token(TYPE);
                                  {if (true) return TYPE;}
      break;
    case SUBTYPE:
      jj_consume_token(SUBTYPE);
                                  {if (true) return SUBTYPE;}
      break;
    case CONSTANT:
      jj_consume_token(CONSTANT);
                                  {if (true) return CONSTANT;}
      break;
    case SIGNAL:
      jj_consume_token(SIGNAL);
                                  {if (true) return SIGNAL;}
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
                                  {if (true) return VARIABLE;}
      break;
    case COMPONENT:
      jj_consume_token(COMPONENT);
                                  {if (true) return COMPONENT;}
      break;
    case LABEL:
      jj_consume_token(LABEL);
                                  {if (true) return LABEL;}
      break;
    case LITERAL:
      jj_consume_token(LITERAL);
                                  {if (true) return LITERAL;}
      break;
    case UNITS:
      jj_consume_token(UNITS);
                                  {if (true) return UNITS;}
      break;
    case GROUP:
      jj_consume_token(GROUP);
                                  {if (true) return GROUP;}
      break;
    case FILE:
      jj_consume_token(FILE);
                                  {if (true) return FILE;}
      break;
    case SUBNATURE:
      jj_consume_token(SUBNATURE);
                                  {if (true) return SUBNATURE;}
      break;
    case NATURE:
      jj_consume_token(NATURE);
                                  {if (true) return NATURE;}
      break;
    case TERMINAL:
      jj_consume_token(TERMINAL);
                                  {if (true) return TERMINAL;}
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void entity_class_entry() throws ParseException {
 /*@bgen(jjtree) entity_class_entry */
  ASTentity_class_entry jjtn000 = new ASTentity_class_entry(JJTENTITY_CLASS_ENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entity_class();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 163:
        jj_consume_token(163);
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_class_entry_list() throws ParseException {
 /*@bgen(jjtree) entity_class_entry_list */
  ASTentity_class_entry_list jjtn000 = new ASTentity_class_entry_list(JJTENTITY_CLASS_ENTRY_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entity_class_entry();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_18;
        }
        jj_consume_token(160);
        entity_class_entry();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_declaration() throws ParseException {
 /*@bgen(jjtree) entity_declaration */
  ASTentity_declaration jjtn000 = new ASTentity_declaration(JJTENTITY_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ENTITY);
      identifier();
      jj_consume_token(IS);
                                                     jjtn000.newBlock();
      entity_header();
      entity_declarative_part();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
        jj_consume_token(BEGIN);
        entity_statement_part();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTITY:
        jj_consume_token(ENTITY);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        entity_simple_name();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.Check();
    jjtn000.endBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_declarative_item() throws ParseException {
    try {
      if (jj_2_37(2147483647)) {
        subprogram_declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case IMPURE:
        case PROCEDURE:
        case PURE:
          subprogram_body();
          break;
        case TYPE:
          type_declaration();
          break;
        case SUBTYPE:
          subtype_declaration();
          break;
        case CONSTANT:
          constant_declaration();
          break;
        case SIGNAL:
          signal_declaration();
          break;
        case SHARED:
        case VARIABLE:
          shared_variable_declaration();
          break;
        case FILE:
          file_declaration();
          break;
        case ALIAS:
          alias_declaration();
          break;
        default:
          jj_la1[90] = jj_gen;
          if (jj_2_38(2147483647)) {
            attribute_declaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ATTRIBUTE:
              attribute_specification();
              break;
            case DISCONNECT:
              disconnection_specification();
              break;
            case USE:
              use_clause();
              break;
            default:
              jj_la1[91] = jj_gen;
              if (jj_2_39(2147483647)) {
                group_template_declaration();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case GROUP:
                  group_declaration();
                  break;
                case NATURE:
                  nature_declaration();
                  break;
                case SUBNATURE:
                  subnature_declaration();
                  break;
                case TERMINAL:
                  terminal_declaration();
                  break;
                default:
                  jj_la1[92] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declarative item");
    }
  }

/**
 * 4.8: Nature Declaration
 * 1076.1 extension
 */
  final public void nature_declaration() throws ParseException {
 /*@bgen(jjtree) nature_declaration */
  ASTnature_declaration jjtn000 = new ASTnature_declaration(JJTNATURE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(NATURE);
      identifier();
      jj_consume_token(IS);
      nature_definition();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension
 */
  final public void nature_definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      scalar_nature_definition();
      break;
    case ARRAY:
    case RECORD:
      composite_nature_definition();
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void subnature_declaration() throws ParseException {
 /*@bgen(jjtree) subnature_declaration */
  ASTsubnature_declaration jjtn000 = new ASTsubnature_declaration(JJTSUBNATURE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SUBNATURE);
      identifier();
      jj_consume_token(IS);
      subnature_indication();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void subnature_indication() throws ParseException {
 /*@bgen(jjtree) subnature_indication */
  ASTsubnature_indication jjtn000 = new ASTsubnature_indication(JJTSUBNATURE_INDICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      nature_mark();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        index_constraint();
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOLERANCE:
        jj_consume_token(TOLERANCE);
        string_expression();
        jj_consume_token(ACROSS);
        string_expression();
        jj_consume_token(THROUGH);
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void nature_mark() throws ParseException {
    if (jj_2_40(2147483647)) {
      nature_name();
    } else if (jj_2_41(2147483647)) {
      subnature_name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void entity_declarative_part() throws ParseException {
 /*@bgen(jjtree) entity_declarative_part */
  ASTentity_declarative_part jjtn000 = new ASTentity_declarative_part(JJTENTITY_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case CONSTANT:
        case DISCONNECT:
        case FILE:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case NATURE:
        case PROCEDURE:
        case PURE:
        case SIGNAL:
        case SHARED:
        case SUBNATURE:
        case SUBTYPE:
        case TERMINAL:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[96] = jj_gen;
          break label_19;
        }
        entity_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_designator() throws ParseException {
 /*@bgen(jjtree) entity_designator */
  ASTentity_designator jjtn000 = new ASTentity_designator(JJTENTITY_DESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entity_tag();
      signature();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_header() throws ParseException {
 /*@bgen(jjtree) entity_header */
  ASTentity_header jjtn000 = new ASTentity_header(JJTENTITY_HEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERIC:
        formal_generic_clause();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PORT:
        formal_port_clause();
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_name_list() throws ParseException {
 /*@bgen(jjtree) entity_name_list */
  ASTentity_name_list jjtn000 = new ASTentity_name_list(JJTENTITY_NAME_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case character_literal:
      case extended_identifier:
      case string_literal:
        entity_designator();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            ;
            break;
          default:
            jj_la1[99] = jj_gen;
            break label_20;
          }
          jj_consume_token(160);
          entity_designator();
        }
        break;
      case OTHERS:
        jj_consume_token(OTHERS);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_specification() throws ParseException {
 /*@bgen(jjtree) entity_specification */
  ASTentity_specification jjtn000 = new ASTentity_specification(JJTENTITY_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      entity_name_list();
      jj_consume_token(COLON);
      entity_class();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void entity_statement() throws ParseException {
    if (jj_2_42(2147483647)) {
      concurrent_assertion_statement();
    } else if (jj_2_43(2147483647)) {
      passive_process_statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        passive_concurrent_procedure_call_statement();
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void entity_statement_part() throws ParseException {
 /*@bgen(jjtree) entity_statement_part */
  ASTentity_statement_part jjtn000 = new ASTentity_statement_part(JJTENTITY_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case POSTPONED:
        case PROCESS:
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_21;
        }
        entity_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void entity_tag() throws ParseException {
 /*@bgen(jjtree) entity_tag */
  ASTentity_tag jjtn000 = new ASTentity_tag(JJTENTITY_TAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        simple_name();
        break;
      case character_literal:
        jj_consume_token(character_literal);
        break;
      case string_literal:
        operator_symbol();
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void enumeration_literal() throws ParseException {
 /*@bgen(jjtree) enumeration_literal */
  ASTenumeration_literal jjtn000 = new ASTenumeration_literal(JJTENUMERATION_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case character_literal:
        jj_consume_token(character_literal);
        break;
      case basic_identifier:
      case extended_identifier:
        identifier();
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void enumeration_type_definition() throws ParseException {
 /*@bgen(jjtree) enumeration_type_definition */
  ASTenumeration_type_definition jjtn000 = new ASTenumeration_type_definition(JJTENUMERATION_TYPE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(158);
      enumeration_literal();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_22;
        }
        jj_consume_token(160);
        enumeration_literal();
      }
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void exit_statement() throws ParseException {
 /*@bgen(jjtree) exit_statement */
  ASTexit_statement jjtn000 = new ASTexit_statement(JJTEXIT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      jj_consume_token(EXIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        loop_label();
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        condition();
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void expression() throws ParseException {
  int op;
    relation();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case NAND:
      case NOR:
      case OR:
      case XNOR:
      case XOR:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_23;
      }
      op = logical_operator();
                                         ASTrelation jjtn001 = new ASTrelation(JJTRELATION);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtreeOpenNodeScope(jjtn001);
      try {
        relation();
      } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
      } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtreeCloseNodeScope(jjtn001);
                                         }
      }
    }
  }

  final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABS:
      jj_consume_token(ABS);
      primary();
      break;
    case NOT:
      jj_consume_token(NOT);
      primary();
      break;
    case NEW:
    case NULL:
    case based_literal:
    case basic_identifier:
    case bit_string_literal:
    case character_literal:
    case decimal_literal:
    case extended_identifier:
    case string_literal:
    case 158:
      primary();
      if (jj_2_44(2147483647)) {
        jj_consume_token(EXP);
                                                   ASTfactor jjtn001 = new ASTfactor(JJTFACTOR);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                   jjtreeOpenNodeScope(jjtn001);
        try {
          primary();
        } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte001;}
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte001;}
                                                   }
                                                   {if (true) throw (Error)jjte001;}
        } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtreeCloseNodeScope(jjtn001);
                                                   }
        }
      } else {
        ;
      }
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void file_declaration() throws ParseException {
 /*@bgen(jjtree) file_declaration */
  ASTfile_declaration jjtn000 = new ASTfile_declaration(JJTFILE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FILE);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
      case OPEN:
        file_open_information();
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void file_logical_name() throws ParseException {
    string_expression();
  }

  final public void file_open_information() throws ParseException {
 /*@bgen(jjtree) file_open_information */
  ASTfile_open_information jjtn000 = new ASTfile_open_information(JJTFILE_OPEN_INFORMATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
        jj_consume_token(OPEN);
        file_open_kind_expression();
        jj_consume_token(IS);
        file_logical_name();
        break;
      case IS:
        jj_consume_token(IS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
        case OUT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IN:
            jj_consume_token(IN);
            break;
          case OUT:
            jj_consume_token(OUT);
            break;
          default:
            jj_la1[112] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[113] = jj_gen;
          ;
        }
        file_logical_name();
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void file_type_definition() throws ParseException {
    jj_consume_token(FILE);
    jj_consume_token(OF);
    type_mark();
  }

  final public void floating_type_definition() throws ParseException {
    range_constraint();
  }

  final public void formal_designator() throws ParseException {
    if (jj_2_45(2147483647)) {
      generic_name();
    } else if (jj_2_46(2147483647)) {
      port_name();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        parameter_name();
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void formal_parameter_list() throws ParseException {
 /*@bgen(jjtree) formal_parameter_list */
  ASTformal_parameter_list jjtn000 = new ASTformal_parameter_list(JJTFORMAL_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      parameter_interface_list();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void formal_part() throws ParseException {
    if (jj_2_47(2147483647)) {
      function_name();
      jj_consume_token(158);
      formal_designator();
      jj_consume_token(159);
    } else if (jj_2_48(2147483647)) {
      type_mark();
      jj_consume_token(158);
      formal_designator();
      jj_consume_token(159);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        formal_designator();
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void full_type_declaration() throws ParseException {
 /*@bgen(jjtree) full_type_declaration */
  ASTfull_type_declaration jjtn000 = new ASTfull_type_declaration(JJTFULL_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TYPE);
      identifier();
      jj_consume_token(IS);
      type_definition();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void function_call() throws ParseException {
 /*@bgen(jjtree) function_call */
  ASTfunction_call jjtn000 = new ASTfunction_call(JJTFUNCTION_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      function_name();
      if (jj_2_49(2147483647)) {
        jj_consume_token(158);
        actual_parameter_part();
        jj_consume_token(159);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * Section 9.7
 */
  final public void generate_statement() throws ParseException {
 /*@bgen(jjtree) generate_statement */
  ASTgenerate_statement jjtn000 = new ASTgenerate_statement(JJTGENERATE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      generate_label();
      jj_consume_token(COLON);
      generation_scheme();
      jj_consume_token(GENERATE);
      if (jj_2_50(2)) {
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALIAS:
          case ATTRIBUTE:
          case COMPONENT:
          case CONSTANT:
          case DISCONNECT:
          case FILE:
          case FOR:
          case FUNCTION:
          case GROUP:
          case IMPURE:
          case NATURE:
          case PROCEDURE:
          case PURE:
          case QUANTITY:
          case SIGNAL:
          case SHARED:
          case SUBNATURE:
          case SUBTYPE:
          case TERMINAL:
          case TYPE:
          case USE:
          case VARIABLE:
            ;
            break;
          default:
            jj_la1[117] = jj_gen;
            break label_24;
          }
          block_declarative_item();
        }
        jj_consume_token(BEGIN);
      } else {
        ;
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case ASSERT:
        case BREAK:
        case CASE:
        case IF:
        case IMPURE:
        case NEW:
        case NOT:
        case NULL:
        case POSTPONED:
        case PROCEDURAL:
        case PROCESS:
        case PURE:
        case WITH:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          ;
          break;
        default:
          jj_la1[118] = jj_gen;
          break label_25;
        }
        architecture_statement();
      }
      jj_consume_token(END);
      jj_consume_token(GENERATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        generate_label();
        break;
      default:
        jj_la1[119] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/** 1076.1 extension: */
  final public void concurrent_break_statement() throws ParseException {
 /*@bgen(jjtree) concurrent_break_statement */
  ASTconcurrent_break_statement jjtn000 = new ASTconcurrent_break_statement(JJTCONCURRENT_BREAK_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        break_list();
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        sensitivity_clause();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        condition();
        break;
      default:
        jj_la1[123] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void generation_scheme() throws ParseException {
 /*@bgen(jjtree) generation_scheme */
  ASTgeneration_scheme jjtn000 = new ASTgeneration_scheme(JJTGENERATION_SCHEME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        jj_consume_token(FOR);
        generate_parameter_specification();
        break;
      case IF:
        jj_consume_token(IF);
        condition();
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void generic_clause() throws ParseException {
 /*@bgen(jjtree) generic_clause */
  ASTgeneric_clause jjtn000 = new ASTgeneric_clause(JJTGENERIC_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(GENERIC);
      jj_consume_token(158);
      generic_list();
      jj_consume_token(159);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void generic_list() throws ParseException {
    generic_interface_list();
  }

  final public void generic_map_aspect() throws ParseException {
    jj_consume_token(GENERIC);
    jj_consume_token(MAP);
    jj_consume_token(158);
    generic_association_list();
    jj_consume_token(159);
  }

  final public void group_constituent() throws ParseException {
 /*@bgen(jjtree) group_constituent */
  ASTgroup_constituent jjtn000 = new ASTgroup_constituent(JJTGROUP_CONSTITUENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        name();
        break;
      case character_literal:
        jj_consume_token(character_literal);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void group_constituent_list() throws ParseException {
 /*@bgen(jjtree) group_constituent_list */
  ASTgroup_constituent_list jjtn000 = new ASTgroup_constituent_list(JJTGROUP_CONSTITUENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      group_constituent();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_26;
        }
        jj_consume_token(160);
        group_constituent();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void group_template_declaration() throws ParseException {
 /*@bgen(jjtree) group_template_declaration */
  ASTgroup_template_declaration jjtn000 = new ASTgroup_template_declaration(JJTGROUP_TEMPLATE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(GROUP);
      identifier();
      jj_consume_token(IS);
      jj_consume_token(158);
      entity_class_entry_list();
      jj_consume_token(159);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void group_declaration() throws ParseException {
 /*@bgen(jjtree) group_declaration */
  ASTgroup_declaration jjtn000 = new ASTgroup_declaration(JJTGROUP_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(GROUP);
      identifier();
      jj_consume_token(COLON);
      group_template_name();
      jj_consume_token(158);
      group_constituent_list();
      jj_consume_token(159);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void guarded_signal_specification() throws ParseException {
 /*@bgen(jjtree) guarded_signal_specification */
  ASTguarded_signal_specification jjtn000 = new ASTguarded_signal_specification(JJTGUARDED_SIGNAL_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      guarded_signal_list();
      jj_consume_token(COLON);
      type_mark();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void identifier() throws ParseException {
 /*@bgen(jjtree) identifier */
  ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
        t = jj_consume_token(basic_identifier);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                               jjtn000.name = t.image;
        break;
      case extended_identifier:
        t = jj_consume_token(extended_identifier);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                               jjtn000.name = t.image;
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
    }
  }

  final public void identifier_list() throws ParseException {
 /*@bgen(jjtree) identifier_list */
  ASTidentifier_list jjtn000 = new ASTidentifier_list(JJTIDENTIFIER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[128] = jj_gen;
          break label_27;
        }
        jj_consume_token(160);
        identifier();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void if_statement() throws ParseException {
 /*@bgen(jjtree) if_statement */
  ASTif_statement jjtn000 = new ASTif_statement(JJTIF_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        if_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      sequence_of_statements();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSIF:
          ;
          break;
        default:
          jj_la1[130] = jj_gen;
          break label_28;
        }
        jj_consume_token(ELSIF);
        condition();
        jj_consume_token(THEN);
        sequence_of_statements();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        sequence_of_statements();
        break;
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(IF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        if_label();
        break;
      default:
        jj_la1[132] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void incomplete_type_declaration() throws ParseException {
 /*@bgen(jjtree) incomplete_type_declaration */
  ASTincomplete_type_declaration jjtn000 = new ASTincomplete_type_declaration(JJTINCOMPLETE_TYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TYPE);
      identifier();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void index_constraint() throws ParseException {
 /*@bgen(jjtree) index_constraint */
  ASTindex_constraint jjtn000 = new ASTindex_constraint(JJTINDEX_CONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(158);
      discrete_range();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[133] = jj_gen;
          break label_29;
        }
        jj_consume_token(160);
        discrete_range();
      }
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void index_specification() throws ParseException {
 /*@bgen(jjtree) index_specification */
  ASTindex_specification jjtn000 = new ASTindex_specification(JJTINDEX_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_51(2147483647)) {
        discrete_range();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case NEW:
        case NOT:
        case NULL:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          static_expression();
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void index_subtype_definition() throws ParseException {
 /*@bgen(jjtree) index_subtype_definition */
  ASTindex_subtype_definition jjtn000 = new ASTindex_subtype_definition(JJTINDEX_SUBTYPE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_mark();
      jj_consume_token(RANGE);
      jj_consume_token(163);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void indexed_name() throws ParseException {
 /*@bgen(jjtree) indexed_name */
  ASTindexed_name jjtn000 = new ASTindexed_name(JJTINDEXED_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      prefix();
      jj_consume_token(158);
      expression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[135] = jj_gen;
          break label_30;
        }
        jj_consume_token(160);
        expression();
      }
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void instantiated_unit() throws ParseException {
 /*@bgen(jjtree) instantiated_unit */
  ASTinstantiated_unit jjtn000 = new ASTinstantiated_unit(JJTINSTANTIATED_UNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPONENT:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMPONENT:
          jj_consume_token(COMPONENT);
          break;
        default:
          jj_la1[136] = jj_gen;
          ;
        }
        component_name();
        break;
      case ENTITY:
        jj_consume_token(ENTITY);
        entity_name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          architecture_identifier();
          jj_consume_token(159);
          break;
        default:
          jj_la1[137] = jj_gen;
          ;
        }
        break;
      case CONFIGURATION:
        jj_consume_token(CONFIGURATION);
        configuration_name();
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void instantiation_list() throws ParseException {
 /*@bgen(jjtree) instantiation_list */
  ASTinstantiation_list jjtn000 = new ASTinstantiation_list(JJTINSTANTIATION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        instantiation_label();
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            ;
            break;
          default:
            jj_la1[139] = jj_gen;
            break label_31;
          }
          jj_consume_token(160);
          instantiation_label();
        }
        break;
      case OTHERS:
        jj_consume_token(OTHERS);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void integer_type_definition() throws ParseException {
    range_constraint();
  }

  final public void interface_constant_declaration() throws ParseException {
 /*@bgen(jjtree) interface_constant_declaration */
  ASTinterface_constant_declaration jjtn000 = new ASTinterface_constant_declaration(JJTINTERFACE_CONSTANT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        jj_consume_token(CONSTANT);
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      identifier_list();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        break;
      default:
        jj_la1[142] = jj_gen;
        ;
      }
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        static_expression();
        break;
      default:
        jj_la1[143] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * Section 4.3.2:
 */
  final public void interface_declaration() throws ParseException {
    if (jj_2_52(2147483647)) {
      interface_constant_declaration();
    } else if (jj_2_53(2147483647)) {
      interface_signal_declaration();
    } else if (jj_2_54(2147483647)) {
      interface_variable_declaration();
    } else if (jj_2_55(2147483647)) {
      interface_file_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERMINAL:
        interface_terminal_declaration();
        break;
      case QUANTITY:
        interface_quantity_declaration();
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void interface_terminal_declaration() throws ParseException {
 /*@bgen(jjtree) interface_terminal_declaration */
  ASTinterface_terminal_declaration jjtn000 = new ASTinterface_terminal_declaration(JJTINTERFACE_TERMINAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TERMINAL);
      identifier_list();
      jj_consume_token(COLON);
      subnature_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void interface_quantity_declaration() throws ParseException {
 /*@bgen(jjtree) interface_quantity_declaration */
  ASTinterface_quantity_declaration jjtn000 = new ASTinterface_quantity_declaration(JJTINTERFACE_QUANTITY_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(QUANTITY);
      identifier_list();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case OUT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          jj_consume_token(IN);
          break;
        case OUT:
          jj_consume_token(OUT);
          break;
        default:
          jj_la1[145] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[146] = jj_gen;
        ;
      }
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        static_expression();
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void interface_element() throws ParseException {
    interface_declaration();
  }

  final public void interface_file_declaration() throws ParseException {
 /*@bgen(jjtree) interface_file_declaration */
  ASTinterface_file_declaration jjtn000 = new ASTinterface_file_declaration(JJTINTERFACE_FILE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FILE);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void interface_list() throws ParseException {
 /*@bgen(jjtree) interface_list */
  ASTinterface_list jjtn000 = new ASTinterface_list(JJTINTERFACE_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      interface_element();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[148] = jj_gen;
          break label_32;
        }
        jj_consume_token(SEMICOLON);
        interface_element();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void interface_signal_declaration() throws ParseException {
 /*@bgen(jjtree) interface_signal_declaration */
  ASTinterface_signal_declaration jjtn000 = new ASTinterface_signal_declaration(JJTINTERFACE_SIGNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNAL:
        jj_consume_token(SIGNAL);
        break;
      default:
        jj_la1[149] = jj_gen;
        ;
      }
      identifier_list();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BUFFER:
      case IN:
      case INOUT:
      case LINKAGE:
      case OUT:
        mode();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BUS:
        jj_consume_token(BUS);
        break;
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        static_expression();
        break;
      default:
        jj_la1[152] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void interface_variable_declaration() throws ParseException {
 /*@bgen(jjtree) interface_variable_declaration */
  ASTinterface_variable_declaration jjtn000 = new ASTinterface_variable_declaration(JJTINTERFACE_VARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        jj_consume_token(VARIABLE);
        break;
      default:
        jj_la1[153] = jj_gen;
        ;
      }
      identifier_list();
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BUFFER:
      case IN:
      case INOUT:
      case LINKAGE:
      case OUT:
        mode();
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        static_expression();
        break;
      default:
        jj_la1[155] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void iteration_scheme() throws ParseException {
 /*@bgen(jjtree) iteration_scheme */
  ASTiteration_scheme jjtn000 = new ASTiteration_scheme(JJTITERATION_SCHEME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        condition();
        break;
      case FOR:
        jj_consume_token(FOR);
        loop_parameter_specification();
        break;
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void label() throws ParseException {
    identifier();
  }

  final public void library_clause() throws ParseException {
    jj_consume_token(LIBRARY);
    logical_name_list();
    jj_consume_token(SEMICOLON);
  }

  final public void library_unit() throws ParseException {
    if (jj_2_56(2147483647)) {
      primary_unit();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARCHITECTURE:
      case PACKAGE:
        secondary_unit();
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void literal() throws ParseException {
 /*@bgen(jjtree) literal */
  ASTliteral jjtn000 = new ASTliteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_57(2147483647)) {
        numeric_literal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case character_literal:
        case extended_identifier:
          enumeration_literal();
          break;
        case string_literal:
          jj_consume_token(string_literal);
          break;
        case bit_string_literal:
          jj_consume_token(bit_string_literal);
          break;
        case NULL:
          jj_consume_token(NULL);
          break;
        default:
          jj_la1[158] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void logical_name() throws ParseException {
    identifier();
  }

  final public void logical_name_list() throws ParseException {
 /*@bgen(jjtree) logical_name_list */
  ASTlogical_name_list jjtn000 = new ASTlogical_name_list(JJTLOGICAL_NAME_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      logical_name();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[159] = jj_gen;
          break label_33;
        }
        jj_consume_token(160);
        logical_name();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public int logical_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
                        {if (true) return AND;}
      break;
    case OR:
      jj_consume_token(OR);
                        {if (true) return OR;}
      break;
    case NAND:
      jj_consume_token(NAND);
                        {if (true) return NAND;}
      break;
    case NOR:
      jj_consume_token(NOR);
                        {if (true) return NOR;}
      break;
    case XOR:
      jj_consume_token(XOR);
                        {if (true) return XOR;}
      break;
    case XNOR:
      jj_consume_token(XNOR);
                        {if (true) return XNOR;}
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void loop_statement() throws ParseException {
 /*@bgen(jjtree) loop_statement */
  ASTloop_statement jjtn000 = new ASTloop_statement(JJTLOOP_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        loop_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[161] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case WHILE:
        iteration_scheme();
        break;
      default:
        jj_la1[162] = jj_gen;
        ;
      }
      jj_consume_token(LOOP);
      sequence_of_statements();
      jj_consume_token(END);
      jj_consume_token(LOOP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        loop_label();
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public int miscellaneous_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXP:
      jj_consume_token(EXP);
                          {if (true) return EXP;}
      break;
    case ABS:
      jj_consume_token(ABS);
                          {if (true) return ABS;}
      break;
    case NOT:
      jj_consume_token(NOT);
                          {if (true) return NOT;}
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void mode() throws ParseException {
 /*@bgen(jjtree) mode */
  ASTmode jjtn000 = new ASTmode(JJTMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        break;
      case OUT:
        jj_consume_token(OUT);
        break;
      case INOUT:
        jj_consume_token(INOUT);
        break;
      case BUFFER:
        jj_consume_token(BUFFER);
        break;
      case LINKAGE:
        jj_consume_token(LINKAGE);
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public int multiplying_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
                          {if (true) return MUL;}
      break;
    case DIV:
      jj_consume_token(DIV);
                          {if (true) return DIV;}
      break;
    case MOD:
      jj_consume_token(MOD);
                          {if (true) return MOD;}
      break;
    case REM:
      jj_consume_token(REM);
                          {if (true) return REM;}
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void name() throws ParseException {
 /*@bgen(jjtree) name */
  ASTname jjtn000 = new ASTname(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        simple_name();
        break;
      case string_literal:
        operator_symbol();
        break;
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_58(2147483647)) {
        name_extension();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void name_extension() throws ParseException {
    if (jj_2_60(2147483647)) {
      signature();
      jj_consume_token(161);
      attribute_designator();
      if (jj_2_59(2147483647)) {
        jj_consume_token(158);
        expression();
        jj_consume_token(159);
      } else {
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 164:
        jj_consume_token(164);
        suffix();
        break;
      default:
        jj_la1[169] = jj_gen;
        if (jj_2_61(2147483647)) {
          jj_consume_token(158);
          discrete_range();
          jj_consume_token(159);
        } else if (jj_2_62(2147483647)) {
          jj_consume_token(158);
          expression();
          label_34:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 160:
              ;
              break;
            default:
              jj_la1[168] = jj_gen;
              break label_34;
            }
            jj_consume_token(160);
            expression();
          }
          jj_consume_token(159);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (jj_2_63(2147483647)) {
      name_extension();
    } else {
      ;
    }
  }

/**
 * 1076.1 extension:
 */
  final public void nature_element_declaration() throws ParseException {
 /*@bgen(jjtree) nature_element_declaration */
  ASTnature_element_declaration jjtn000 = new ASTnature_element_declaration(JJTNATURE_ELEMENT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier_list();
      jj_consume_token(COLON);
      element_subnature_definition();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void element_subnature_definition() throws ParseException {
    subnature_indication();
  }

  final public void next_statement() throws ParseException {
 /*@bgen(jjtree) next_statement */
  ASTnext_statement jjtn000 = new ASTnext_statement(JJTNEXT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[170] = jj_gen;
        ;
      }
      jj_consume_token(NEXT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        loop_label();
        break;
      default:
        jj_la1[171] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        jj_consume_token(WHEN);
        condition();
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void null_statement() throws ParseException {
 /*@bgen(jjtree) null_statement */
  ASTnull_statement jjtn000 = new ASTnull_statement(JJTNULL_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[173] = jj_gen;
        ;
      }
      jj_consume_token(NULL);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void numeric_literal() throws ParseException {
    if (jj_2_64(2147483647)) {
      physical_literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case based_literal:
      case decimal_literal:
        abstract_literal();
        break;
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void object_declaration() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        constant_declaration();
        break;
      case SIGNAL:
        signal_declaration();
        break;
      case SHARED:
      case VARIABLE:
        variable_declaration();
        break;
      case FILE:
        file_declaration();
        break;
      case TERMINAL:
        terminal_declaration();
        break;
      case QUANTITY:
        quantity_declaration();
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declaration");
    }
  }

  final public void operator_symbol() throws ParseException {
 /*@bgen(jjtree) operator_symbol */
  ASToperator_symbol jjtn000 = new ASToperator_symbol(JJTOPERATOR_SYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(string_literal);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void options_() throws ParseException {
 /*@bgen(jjtree) options_ */
  ASToptions_ jjtn000 = new ASToptions_(JJTOPTIONS_);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUARDED:
        jj_consume_token(GUARDED);
        break;
      default:
        jj_la1[176] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INERTIAL:
      case REJECT:
      case TRANSPORT:
        delay_mechanism();
        break;
      default:
        jj_la1[177] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void package_body() throws ParseException {
 /*@bgen(jjtree) package_body */
  ASTpackage_body jjtn000 = new ASTpackage_body(JJTPACKAGE_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE);
      jj_consume_token(BODY);
      package_simple_name();
      jj_consume_token(IS);
      package_body_declarative_part();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        jj_consume_token(BODY);
        break;
      default:
        jj_la1[178] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        package_simple_name();
        break;
      default:
        jj_la1[179] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void package_body_declarative_item() throws ParseException {
    try {
      if (jj_2_65(2147483647)) {
        subprogram_declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case IMPURE:
        case PROCEDURE:
        case PURE:
          subprogram_body();
          break;
        case TYPE:
          type_declaration();
          break;
        case SUBTYPE:
          subtype_declaration();
          break;
        case CONSTANT:
          constant_declaration();
          break;
        case SHARED:
        case VARIABLE:
          shared_variable_declaration();
          break;
        case FILE:
          file_declaration();
          break;
        case ALIAS:
          alias_declaration();
          break;
        case USE:
          use_clause();
          break;
        default:
          jj_la1[180] = jj_gen;
          if (jj_2_66(2147483647)) {
            group_template_declaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case GROUP:
              group_declaration();
              break;
            default:
              jj_la1[181] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declarative item");
    }
  }

  final public void package_body_declarative_part() throws ParseException {
 /*@bgen(jjtree) package_body_declarative_part */
  ASTpackage_body_declarative_part jjtn000 = new ASTpackage_body_declarative_part(JJTPACKAGE_BODY_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case CONSTANT:
        case FILE:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case PROCEDURE:
        case PURE:
        case SHARED:
        case SUBTYPE:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[182] = jj_gen;
          break label_35;
        }
        package_body_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void package_declaration() throws ParseException {
 /*@bgen(jjtree) package_declaration */
  ASTpackage_declaration jjtn000 = new ASTpackage_declaration(JJTPACKAGE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE);
      identifier();
      jj_consume_token(IS);
      package_declarative_part();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        break;
      default:
        jj_la1[183] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        package_simple_name();
        break;
      default:
        jj_la1[184] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void package_declarative_item() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
        subprogram_declaration();
        break;
      case TYPE:
        type_declaration();
        break;
      case SUBTYPE:
        subtype_declaration();
        break;
      case CONSTANT:
        constant_declaration();
        break;
      case SIGNAL:
        signal_declaration();
        break;
      case SHARED:
      case VARIABLE:
        shared_variable_declaration();
        break;
      case FILE:
        file_declaration();
        break;
      case ALIAS:
        alias_declaration();
        break;
      case COMPONENT:
        component_declaration();
        break;
      default:
        jj_la1[185] = jj_gen;
        if (jj_2_67(2147483647)) {
          attribute_declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case DISCONNECT:
            disconnection_specification();
            break;
          case USE:
            use_clause();
            break;
          default:
            jj_la1[186] = jj_gen;
            if (jj_2_68(2147483647)) {
              group_template_declaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case GROUP:
                group_declaration();
                break;
              case NATURE:
                nature_declaration();
                break;
              case SUBNATURE:
                subnature_declaration();
                break;
              case TERMINAL:
                terminal_declaration();
                break;
              default:
                jj_la1[187] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in declaration");
    }
  }

  final public void package_declarative_part() throws ParseException {
 /*@bgen(jjtree) package_declarative_part */
  ASTpackage_declarative_part jjtn000 = new ASTpackage_declarative_part(JJTPACKAGE_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case COMPONENT:
        case CONSTANT:
        case DISCONNECT:
        case FILE:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case NATURE:
        case PROCEDURE:
        case PURE:
        case SIGNAL:
        case SHARED:
        case SUBNATURE:
        case SUBTYPE:
        case TERMINAL:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_36;
        }
        package_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void parameter_specification() throws ParseException {
 /*@bgen(jjtree) parameter_specification */
  ASTparameter_specification jjtn000 = new ASTparameter_specification(JJTPARAMETER_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(IN);
      discrete_range();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void physical_literal() throws ParseException {
 /*@bgen(jjtree) physical_literal */
  ASTphysical_literal jjtn000 = new ASTphysical_literal(JJTPHYSICAL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_69(2147483647)) {
        abstract_literal();
      } else {
        ;
      }
      unit_name();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void physical_type_definition() throws ParseException {
 /*@bgen(jjtree) physical_type_definition */
  ASTphysical_type_definition jjtn000 = new ASTphysical_type_definition(JJTPHYSICAL_TYPE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      range_constraint();
      jj_consume_token(UNITS);
      base_unit_declaration();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
          ;
          break;
        default:
          jj_la1[189] = jj_gen;
          break label_37;
        }
        secondary_unit_declaration();
      }
      jj_consume_token(END);
      jj_consume_token(UNITS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        physical_type_simple_name();
        break;
      default:
        jj_la1[190] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void port_clause() throws ParseException {
 /*@bgen(jjtree) port_clause */
  ASTport_clause jjtn000 = new ASTport_clause(JJTPORT_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PORT);
      jj_consume_token(158);
      port_list();
      jj_consume_token(159);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void port_list() throws ParseException {
    port_interface_list();
  }

  final public void port_map_aspect() throws ParseException {
 /*@bgen(jjtree) port_map_aspect */
  ASTport_map_aspect jjtn000 = new ASTport_map_aspect(JJTPORT_MAP_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PORT);
      jj_consume_token(MAP);
      jj_consume_token(158);
      port_association_list();
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void prefix() throws ParseException {
 /*@bgen(jjtree) prefix */
  ASTprefix jjtn000 = new ASTprefix(JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_70(2147483647)) {
        function_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          name();
          break;
        default:
          jj_la1[191] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void primary() throws ParseException {
    if (jj_2_71(2147483647)) {
      qualified_expression();
    } else if (jj_2_72(2147483647)) {
      function_call();
    } else if (jj_2_73(2147483647)) {
      name();
    } else if (jj_2_74(2147483647)) {
      literal();
    } else if (jj_2_75(2147483647)) {
      aggregate();
    } else if (jj_2_76(2147483647)) {
      jj_consume_token(158);
      expression();
      jj_consume_token(159);
    } else if (jj_2_77(2147483647)) {
      type_conversion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        allocator();
        break;
      default:
        jj_la1[192] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void primary_unit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTITY:
      entity_declaration();
      break;
    case CONFIGURATION:
      configuration_declaration();
      break;
    default:
      jj_la1[193] = jj_gen;
      if (jj_2_78(2147483647)) {
        package_declaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void procedure_call() throws ParseException {
 /*@bgen(jjtree) procedure_call */
  ASTprocedure_call jjtn000 = new ASTprocedure_call(JJTPROCEDURE_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      procedure_name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        actual_parameter_part();
        jj_consume_token(159);
        break;
      default:
        jj_la1[194] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void procedure_call_statement() throws ParseException {
 /*@bgen(jjtree) procedure_call_statement */
  ASTprocedure_call_statement jjtn000 = new ASTprocedure_call_statement(JJTPROCEDURE_CALL_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_79(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      procedure_call();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void process_declarative_item() throws ParseException {
    if (jj_2_80(2147483647)) {
      subprogram_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
        subprogram_body();
        break;
      case TYPE:
        type_declaration();
        break;
      case SUBTYPE:
        subtype_declaration();
        break;
      case CONSTANT:
        constant_declaration();
        break;
      case SHARED:
      case VARIABLE:
        variable_declaration();
        break;
      case FILE:
        file_declaration();
        break;
      case ALIAS:
        alias_declaration();
        break;
      default:
        jj_la1[195] = jj_gen;
        if (jj_2_81(2147483647)) {
          attribute_declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case USE:
            use_clause();
            break;
          default:
            jj_la1[196] = jj_gen;
            if (jj_2_82(2147483647)) {
              group_template_declaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case GROUP:
                group_declaration();
                break;
              default:
                jj_la1[197] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void process_declarative_part() throws ParseException {
 /*@bgen(jjtree) process_declarative_part */
  ASTprocess_declarative_part jjtn000 = new ASTprocess_declarative_part(JJTPROCESS_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case CONSTANT:
        case FILE:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case PROCEDURE:
        case PURE:
        case SHARED:
        case SUBTYPE:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[198] = jj_gen;
          break label_38;
        }
        process_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void process_statement() throws ParseException {
 /*@bgen(jjtree) process_statement */
  ASTprocess_statement jjtn000 = new ASTprocess_statement(JJTPROCESS_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        process_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[199] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
        jj_consume_token(POSTPONED);
        break;
      default:
        jj_la1[200] = jj_gen;
        ;
      }
      jj_consume_token(PROCESS);
                                                  jjtn000.newBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 158:
        jj_consume_token(158);
        sensitivity_list();
        jj_consume_token(159);
        break;
      default:
        jj_la1[201] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      default:
        jj_la1[202] = jj_gen;
        ;
      }
      process_declarative_part();
      jj_consume_token(BEGIN);
      process_statement_part();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTPONED:
        jj_consume_token(POSTPONED);
        break;
      default:
        jj_la1[203] = jj_gen;
        ;
      }
      jj_consume_token(PROCESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        process_label();
        break;
      default:
        jj_la1[204] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.Check();
     jjtn000.endBlock();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void process_statement_part() throws ParseException {
 /*@bgen(jjtree) process_statement_part */
  ASTprocess_statement_part jjtn000 = new ASTprocess_statement_part(JJTPROCESS_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BREAK:
        case CASE:
        case EXIT:
        case FOR:
        case IF:
        case LOOP:
        case NEXT:
        case NULL:
        case REPORT:
        case RETURN:
        case WAIT:
        case WHILE:
        case basic_identifier:
        case extended_identifier:
        case string_literal:
        case COLON:
        case 158:
          ;
          break;
        default:
          jj_la1[205] = jj_gen;
          break label_39;
        }
        sequential_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
    VHDL 2002: protected types:
*/
  final public void protected_type_body() throws ParseException {
    jj_consume_token(PROTECTED);
    jj_consume_token(BODY);
    protected_type_body_declarative_part();
    jj_consume_token(END);
    jj_consume_token(PROTECTED);
    jj_consume_token(BODY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
      simple_name();
      break;
    default:
      jj_la1[206] = jj_gen;
      ;
    }
  }

  final public void protected_type_body_declarative_item() throws ParseException {
    if (jj_2_83(2147483647)) {
      subprogram_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
        subprogram_body();
        break;
      case TYPE:
        type_declaration();
        break;
      case SUBTYPE:
        subtype_declaration();
        break;
      case CONSTANT:
        constant_declaration();
        break;
      case SHARED:
      case VARIABLE:
        variable_declaration();
        break;
      case FILE:
        file_declaration();
        break;
      case ALIAS:
        alias_declaration();
        break;
      default:
        jj_la1[207] = jj_gen;
        if (jj_2_84(2147483647)) {
          attribute_declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case USE:
            use_clause();
            break;
          default:
            jj_la1[208] = jj_gen;
            if (jj_2_85(2147483647)) {
              group_template_declaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case GROUP:
                group_declaration();
                break;
              default:
                jj_la1[209] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void protected_type_body_declarative_part() throws ParseException {
    label_40:
    while (true) {
      protected_type_body_declarative_item();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALIAS:
      case ATTRIBUTE:
      case CONSTANT:
      case FILE:
      case FUNCTION:
      case GROUP:
      case IMPURE:
      case PROCEDURE:
      case PURE:
      case SHARED:
      case SUBTYPE:
      case TYPE:
      case USE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[210] = jj_gen;
        break label_40;
      }
    }
  }

  final public void protected_type_declaration() throws ParseException {
    jj_consume_token(PROTECTED);
    protected_type_declarative_part();
    jj_consume_token(END);
    jj_consume_token(PROTECTED);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
      simple_name();
      break;
    default:
      jj_la1[211] = jj_gen;
      ;
    }
  }

  final public void protected_type_declarative_item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case IMPURE:
    case PROCEDURE:
    case PURE:
      subprogram_declaration();
      break;
    case ATTRIBUTE:
      attribute_declaration();
      break;
    case USE:
      use_clause();
      break;
    default:
      jj_la1[212] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void protected_type_declarative_part() throws ParseException {
    label_41:
    while (true) {
      protected_type_declarative_item();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE:
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
      case USE:
        ;
        break;
      default:
        jj_la1[213] = jj_gen;
        break label_41;
      }
    }
  }

  final public void protected_type_definition() throws ParseException {
    if (jj_2_86(2147483647)) {
      protected_type_body();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROTECTED:
        protected_type_declaration();
        break;
      default:
        jj_la1[214] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void qualified_expression() throws ParseException {
 /*@bgen(jjtree) qualified_expression */
  ASTqualified_expression jjtn000 = new ASTqualified_expression(JJTQUALIFIED_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_mark();
      jj_consume_token(161);
      if (jj_2_87(2147483647)) {
        aggregate();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          expression();
          jj_consume_token(159);
          break;
        default:
          jj_la1[215] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void range() throws ParseException {
 /*@bgen(jjtree) range */
  ASTrange jjtn000 = new ASTrange(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_88(2147483647)) {
        simple_expression();
        direction();
        simple_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          range_attribute_name();
          break;
        default:
          jj_la1[216] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void range_constraint() throws ParseException {
    jj_consume_token(RANGE);
    range();
  }

  final public void record_nature_definition() throws ParseException {
 /*@bgen(jjtree) record_nature_definition */
  ASTrecord_nature_definition jjtn000 = new ASTrecord_nature_definition(JJTRECORD_NATURE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RECORD);
      label_42:
      while (true) {
        nature_element_declaration();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
          ;
          break;
        default:
          jj_la1[217] = jj_gen;
          break label_42;
        }
      }
      jj_consume_token(END);
      jj_consume_token(RECORD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        record_nature_simple_name();
        break;
      default:
        jj_la1[218] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void record_type_definition() throws ParseException {
 /*@bgen(jjtree) record_type_definition */
  ASTrecord_type_definition jjtn000 = new ASTrecord_type_definition(JJTRECORD_TYPE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RECORD);
      label_43:
      while (true) {
        element_declaration();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case basic_identifier:
        case extended_identifier:
          ;
          break;
        default:
          jj_la1[219] = jj_gen;
          break label_43;
        }
      }
      jj_consume_token(END);
      jj_consume_token(RECORD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        record_type_simple_name();
        break;
      default:
        jj_la1[220] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void relation() throws ParseException {
  int op;
    shift_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
    case GE:
    case LE:
    case GT:
    case LO:
      op = relational_operator();
    ASTshift_expression jjtn001 = new ASTshift_expression(JJTSHIFT_EXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        shift_expression();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    default:
      jj_la1[221] = jj_gen;
      ;
    }
  }

  final public int relational_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
                          {if (true) return EQ;}
      break;
    case NEQ:
      jj_consume_token(NEQ);
                          {if (true) return NEQ;}
      break;
    case LO:
      jj_consume_token(LO);
                          {if (true) return LO;}
      break;
    case LE:
      jj_consume_token(LE);
                          {if (true) return LE;}
      break;
    case GT:
      jj_consume_token(GT);
                          {if (true) return GT;}
      break;
    case GE:
      jj_consume_token(GE);
                          {if (true) return GE;}
      break;
    default:
      jj_la1[222] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void report_statement() throws ParseException {
 /*@bgen(jjtree) report_statement */
  ASTreport_statement jjtn000 = new ASTreport_statement(JJTREPORT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[223] = jj_gen;
        ;
      }
      jj_consume_token(REPORT);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEVERITY:
        jj_consume_token(SEVERITY);
        expression();
        break;
      default:
        jj_la1[224] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void return_statement() throws ParseException {
 /*@bgen(jjtree) return_statement */
  ASTreturn_statement jjtn000 = new ASTreturn_statement(JJTRETURN_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[225] = jj_gen;
        ;
      }
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABS:
      case NEW:
      case NOT:
      case NULL:
      case based_literal:
      case basic_identifier:
      case bit_string_literal:
      case character_literal:
      case decimal_literal:
      case extended_identifier:
      case string_literal:
      case ADD:
      case SUB:
      case 158:
        expression();
        break;
      default:
        jj_la1[226] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// 1076.1 - extension:
  final public void scalar_nature_definition() throws ParseException {
 /*@bgen(jjtree) scalar_nature_definition */
  ASTscalar_nature_definition jjtn000 = new ASTscalar_nature_definition(JJTSCALAR_NATURE_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_mark();
      jj_consume_token(ACROSS);
      type_mark();
      jj_consume_token(THROUGH);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void scalar_type_definition() throws ParseException {
    if (jj_2_89(2147483647)) {
      physical_type_definition();
    } else if (jj_2_90(2147483647)) {
      enumeration_type_definition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANGE:
        range_constraint();
        break;
      default:
        jj_la1[227] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void secondary_unit() throws ParseException {
    if (jj_2_91(2147483647)) {
      architecture_body();
    } else if (jj_2_92(2147483647)) {
      package_body();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void secondary_unit_declaration() throws ParseException {
 /*@bgen(jjtree) secondary_unit_declaration */
  ASTsecondary_unit_declaration jjtn000 = new ASTsecondary_unit_declaration(JJTSECONDARY_UNIT_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(EQ);
      physical_literal();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void selected_name() throws ParseException {
 /*@bgen(jjtree) selected_name */
  ASTselected_name jjtn000 = new ASTselected_name(JJTSELECTED_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        simple_name();
        break;
      case string_literal:
        operator_symbol();
        break;
      default:
        jj_la1[228] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_93(2147483647)) {
        name_extension();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void selected_signal_assignment() throws ParseException {
 /*@bgen(jjtree) selected_signal_assignment */
  ASTselected_signal_assignment jjtn000 = new ASTselected_signal_assignment(JJTSELECTED_SIGNAL_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WITH);
      expression();
      jj_consume_token(SELECT);
      target();
      jj_consume_token(LE);
      options_();
      selected_waveforms();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void selected_waveforms() throws ParseException {
 /*@bgen(jjtree) selected_waveforms */
  ASTselected_waveforms jjtn000 = new ASTselected_waveforms(JJTSELECTED_WAVEFORMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      waveform();
      jj_consume_token(WHEN);
      choices();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[229] = jj_gen;
          break label_44;
        }
        jj_consume_token(160);
        waveform();
        jj_consume_token(WHEN);
        choices();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void sensitivity_clause() throws ParseException {
    jj_consume_token(ON);
    sensitivity_list();
  }

  final public void sensitivity_list() throws ParseException {
 /*@bgen(jjtree) sensitivity_list */
  ASTsensitivity_list jjtn000 = new ASTsensitivity_list(JJTSENSITIVITY_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      signal_name();
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[230] = jj_gen;
          break label_45;
        }
        jj_consume_token(160);
        signal_name();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void sequence_of_statements() throws ParseException {
 /*@bgen(jjtree) sequence_of_statements */
  ASTsequence_of_statements jjtn000 = new ASTsequence_of_statements(JJTSEQUENCE_OF_STATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BREAK:
        case CASE:
        case EXIT:
        case FOR:
        case IF:
        case LOOP:
        case NEXT:
        case NULL:
        case REPORT:
        case RETURN:
        case WAIT:
        case WHILE:
        case basic_identifier:
        case extended_identifier:
        case string_literal:
        case COLON:
        case 158:
          ;
          break;
        default:
          jj_la1[231] = jj_gen;
          break label_46;
        }
        sequential_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void sequential_statement() throws ParseException {
    try {
      if (jj_2_94(3)) {
        wait_statement();
      } else if (jj_2_95(3)) {
        assertion_statement();
      } else if (jj_2_96(3)) {
        report_statement();
      } else if (jj_2_97(2147483647)) {
        signal_assignment_statement();
      } else if (jj_2_98(2147483647)) {
        variable_assignment_statement();
      } else if (jj_2_99(3)) {
        procedure_call_statement();
      } else if (jj_2_100(3)) {
        if_statement();
      } else if (jj_2_101(3)) {
        case_statement();
      } else if (jj_2_102(3)) {
        loop_statement();
      } else if (jj_2_103(3)) {
        next_statement();
      } else if (jj_2_104(3)) {
        exit_statement();
      } else if (jj_2_105(3)) {
        return_statement();
      } else if (jj_2_106(3)) {
        null_statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case basic_identifier:
        case extended_identifier:
          break_statement();
          break;
        default:
          jj_la1[232] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
    error_skipto(SEMICOLON, "syntax error in sequential statement");
    }
  }

  final public void shift_expression() throws ParseException {
  int op;
    simple_expression();
    if (jj_2_107(2)) {
      op = shift_operator();
    ASTsimple_expression jjtn001 = new ASTsimple_expression(JJTSIMPLE_EXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        simple_expression();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    } else {
      ;
    }
  }

  final public int shift_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLL:
      jj_consume_token(SLL);
                          {if (true) return SLL;}
      break;
    case SRL:
      jj_consume_token(SRL);
                          {if (true) return SRL;}
      break;
    case SLA:
      jj_consume_token(SLA);
                          {if (true) return SLA;}
      break;
    case SRA:
      jj_consume_token(SRA);
                          {if (true) return SRA;}
      break;
    case ROL:
      jj_consume_token(ROL);
                          {if (true) return ROL;}
      break;
    case ROR:
      jj_consume_token(ROR);
                          {if (true) return ROR;}
      break;
    default:
      jj_la1[233] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void sign() throws ParseException {
 /*@bgen(jjtree) sign */
  ASTsign jjtn000 = new ASTsign(JJTSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        break;
      case SUB:
        jj_consume_token(SUB);
        break;
      default:
        jj_la1[234] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void signal_assignment_statement() throws ParseException {
 /*@bgen(jjtree) signal_assignment_statement */
  ASTsignal_assignment_statement jjtn000 = new ASTsignal_assignment_statement(JJTSIGNAL_ASSIGNMENT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_108(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      target();
      jj_consume_token(LE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INERTIAL:
      case REJECT:
      case TRANSPORT:
        delay_mechanism();
        break;
      default:
        jj_la1[235] = jj_gen;
        ;
      }
      waveform();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void signal_declaration() throws ParseException {
 /*@bgen(jjtree) signal_declaration */
  ASTsignal_declaration jjtn000 = new ASTsignal_declaration(JJTSIGNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SIGNAL);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BUS:
      case REGISTER:
        signal_kind();
        break;
      default:
        jj_la1[236] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[237] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void signal_kind() throws ParseException {
 /*@bgen(jjtree) signal_kind */
  ASTsignal_kind jjtn000 = new ASTsignal_kind(JJTSIGNAL_KIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        jj_consume_token(REGISTER);
        break;
      case BUS:
        jj_consume_token(BUS);
        break;
      default:
        jj_la1[238] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void signal_list() throws ParseException {
 /*@bgen(jjtree) signal_list */
  ASTsignal_list jjtn000 = new ASTsignal_list(JJTSIGNAL_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        signal_name();
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            ;
            break;
          default:
            jj_la1[239] = jj_gen;
            break label_47;
          }
          jj_consume_token(160);
          signal_name();
        }
        break;
      case OTHERS:
        jj_consume_token(OTHERS);
        break;
      case ALL:
        jj_consume_token(ALL);
        break;
      default:
        jj_la1[240] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void signature() throws ParseException {
 /*@bgen(jjtree) signature */
  ASTsignature jjtn000 = new ASTsignature(JJTSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        type_mark();
        label_48:
        while (true) {
          if (jj_2_109(2147483647)) {
            ;
          } else {
            break label_48;
          }
          jj_consume_token(160);
          type_mark();
        }
        break;
      default:
        jj_la1[241] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        type_mark();
        break;
      default:
        jj_la1[242] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void simple_expression() throws ParseException {
  int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
      sign();
      break;
    default:
      jj_la1[243] = jj_gen;
      ;
    }
    term();
    label_49:
    while (true) {
      if (jj_2_110(2)) {
        ;
      } else {
        break label_49;
      }
      op = adding_operator();
                                         ASTterm jjtn001 = new ASTterm(JJTTERM);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtreeOpenNodeScope(jjtn001);
      try {
        term();
      } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
      } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtreeCloseNodeScope(jjtn001);
                                         }
      }
    }
  }

  final public void simple_name() throws ParseException {
    identifier();
  }

  final public void slice_name() throws ParseException {
 /*@bgen(jjtree) slice_name */
  ASTslice_name jjtn000 = new ASTslice_name(JJTSLICE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      prefix();
      jj_consume_token(158);
      discrete_range();
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void subprogram_body() throws ParseException {
 /*@bgen(jjtree) subprogram_body */
  ASTsubprogram_body jjtn000 = new ASTsubprogram_body(JJTSUBPROGRAM_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      subprogram_specification();
      jj_consume_token(IS);
      subprogram_declarative_part();
      jj_consume_token(BEGIN);
      subprogram_statement_part();
      jj_consume_token(END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROCEDURE:
        subprogram_kind();
        break;
      default:
        jj_la1[244] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        designator();
        break;
      default:
        jj_la1[245] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void subprogram_declaration() throws ParseException {
    subprogram_specification();
    jj_consume_token(SEMICOLON);
  }

  final public void subprogram_declarative_item() throws ParseException {
    if (jj_2_111(2147483647)) {
      subprogram_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
        subprogram_body();
        break;
      case TYPE:
        type_declaration();
        break;
      case SUBTYPE:
        subtype_declaration();
        break;
      case CONSTANT:
        constant_declaration();
        break;
      case SHARED:
      case VARIABLE:
        variable_declaration();
        break;
      case FILE:
        file_declaration();
        break;
      case ALIAS:
        alias_declaration();
        break;
      default:
        jj_la1[246] = jj_gen;
        if (jj_2_112(2147483647)) {
          attribute_declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case USE:
            use_clause();
            break;
          default:
            jj_la1[247] = jj_gen;
            if (jj_2_113(2147483647)) {
              group_template_declaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case GROUP:
                group_declaration();
                break;
              default:
                jj_la1[248] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void subprogram_declarative_part() throws ParseException {
 /*@bgen(jjtree) subprogram_declarative_part */
  ASTsubprogram_declarative_part jjtn000 = new ASTsubprogram_declarative_part(JJTSUBPROGRAM_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case CONSTANT:
        case FILE:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case PROCEDURE:
        case PURE:
        case SHARED:
        case SUBTYPE:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[249] = jj_gen;
          break label_50;
        }
        subprogram_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public int subprogram_kind() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      jj_consume_token(PROCEDURE);
                                  {if (true) return PROCEDURE;}
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
                                  {if (true) return FUNCTION;}
      break;
    default:
      jj_la1[250] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void subprogram_specification() throws ParseException {
 /*@bgen(jjtree) subprogram_specification */
  ASTsubprogram_specification jjtn000 = new ASTsubprogram_specification(JJTSUBPROGRAM_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        jj_consume_token(PROCEDURE);
        designator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          formal_parameter_list();
          jj_consume_token(159);
          break;
        default:
          jj_la1[251] = jj_gen;
          ;
        }
        break;
      case FUNCTION:
      case IMPURE:
      case PURE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPURE:
        case PURE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PURE:
            jj_consume_token(PURE);
            break;
          case IMPURE:
            jj_consume_token(IMPURE);
            break;
          default:
            jj_la1[252] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[253] = jj_gen;
          ;
        }
        jj_consume_token(FUNCTION);
        designator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 158:
          jj_consume_token(158);
          formal_parameter_list();
          jj_consume_token(159);
          break;
        default:
          jj_la1[254] = jj_gen;
          ;
        }
        jj_consume_token(RETURN);
        type_mark();
        break;
      default:
        jj_la1[255] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void subprogram_statement_part() throws ParseException {
 /*@bgen(jjtree) subprogram_statement_part */
  ASTsubprogram_statement_part jjtn000 = new ASTsubprogram_statement_part(JJTSUBPROGRAM_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BREAK:
        case CASE:
        case EXIT:
        case FOR:
        case IF:
        case LOOP:
        case NEXT:
        case NULL:
        case REPORT:
        case RETURN:
        case WAIT:
        case WHILE:
        case basic_identifier:
        case extended_identifier:
        case string_literal:
        case COLON:
        case 158:
          ;
          break;
        default:
          jj_la1[256] = jj_gen;
          break label_51;
        }
        sequential_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void subtype_declaration() throws ParseException {
 /*@bgen(jjtree) subtype_declaration */
  ASTsubtype_declaration jjtn000 = new ASTsubtype_declaration(JJTSUBTYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SUBTYPE);
      identifier();
      jj_consume_token(IS);
      subtype_indication();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * Section 4.1:
 */
  final public void subtype_indication() throws ParseException {
 /*@bgen(jjtree) subtype_indication */
  ASTsubtype_indication jjtn000 = new ASTsubtype_indication(JJTSUBTYPE_INDICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_118(2147483647)) {
        resolution_function_name();
        type_mark();
        constraint();
        if (jj_2_114(2147483647)) {
          tolerance_aspect();
        } else {
          ;
        }
      } else if (jj_2_119(2147483647)) {
        type_mark();
        constraint();
        if (jj_2_115(2147483647)) {
          tolerance_aspect();
        } else {
          ;
        }
      } else if (jj_2_120(2147483647)) {
        resolution_function_name();
        type_mark();
        if (jj_2_116(2147483647)) {
          tolerance_aspect();
        } else {
          ;
        }
      } else if (jj_2_121(2147483647)) {
        type_mark();
        if (jj_2_117(2147483647)) {
          tolerance_aspect();
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void tolerance_aspect() throws ParseException {
    jj_consume_token(TOLERANCE);
    string_expression();
  }

/**
 * Section 4.3.1.6: Quantity declaration
 * 1076.1 extension:
 */
  final public void quantity_declaration() throws ParseException {
    if (jj_2_122(2147483647)) {
      free_quantity_declaration();
    } else if (jj_2_123(2147483647)) {
      branch_quantity_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUANTITY:
        source_quantity_declaration();
        break;
      default:
        jj_la1[257] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void free_quantity_declaration() throws ParseException {
 /*@bgen(jjtree) free_quantity_declaration */
  ASTfree_quantity_declaration jjtn000 = new ASTfree_quantity_declaration(JJTFREE_QUANTITY_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(QUANTITY);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[258] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void branch_quantity_declaration() throws ParseException {
 /*@bgen(jjtree) branch_quantity_declaration */
  ASTbranch_quantity_declaration jjtn000 = new ASTbranch_quantity_declaration(JJTBRANCH_QUANTITY_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(QUANTITY);
      if (jj_2_124(2147483647)) {
        across_aspect();
      } else {
        ;
      }
      if (jj_2_125(2147483647)) {
        through_aspect();
      } else {
        ;
      }
      terminal_aspect();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void source_quantity_declaration() throws ParseException {
 /*@bgen(jjtree) source_quantity_declaration */
  ASTsource_quantity_declaration jjtn000 = new ASTsource_quantity_declaration(JJTSOURCE_QUANTITY_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(QUANTITY);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      source_aspect();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void across_aspect() throws ParseException {
 /*@bgen(jjtree) across_aspect */
  ASTacross_aspect jjtn000 = new ASTacross_aspect(JJTACROSS_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier_list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOLERANCE:
        tolerance_aspect();
        break;
      default:
        jj_la1[259] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[260] = jj_gen;
        ;
      }
      jj_consume_token(ACROSS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void through_aspect() throws ParseException {
 /*@bgen(jjtree) through_aspect */
  ASTthrough_aspect jjtn000 = new ASTthrough_aspect(JJTTHROUGH_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      identifier_list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOLERANCE:
        tolerance_aspect();
        break;
      default:
        jj_la1[261] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[262] = jj_gen;
        ;
      }
      jj_consume_token(THROUGH);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void source_aspect() throws ParseException {
 /*@bgen(jjtree) source_aspect */
  ASTsource_aspect jjtn000 = new ASTsource_aspect(JJTSOURCE_ASPECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECTRUM:
        jj_consume_token(SPECTRUM);
        magnitude_simple_expression();
        jj_consume_token(160);
        phase_simple_expression();
        break;
      case NOISE:
        jj_consume_token(NOISE);
        magnitude_simple_expression();
        break;
      default:
        jj_la1[263] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void suffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
      simple_name();
      break;
    case character_literal:
      jj_consume_token(character_literal);
      break;
    case string_literal:
      operator_symbol();
      break;
    case ALL:
      jj_consume_token(ALL);
      break;
    default:
      jj_la1[264] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void target() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      name();
      break;
    case 158:
      aggregate();
      break;
    default:
      jj_la1[265] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void term() throws ParseException {
  int op;
    factor();
    label_52:
    while (true) {
      if (jj_2_126(2)) {
        ;
      } else {
        break label_52;
      }
      op = multiplying_operator();
                                                        ASTfactor jjtn001 = new ASTfactor(JJTFACTOR);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                        jjtreeOpenNodeScope(jjtn001);
      try {
        factor();
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                          jjtreeCloseNodeScope(jjtn001);
                                                        }
      }
    }
  }

  final public void timeout_clause() throws ParseException {
    jj_consume_token(FOR);
    time_or_real_expression();
  }

  final public void type_conversion() throws ParseException {
 /*@bgen(jjtree) type_conversion */
  ASTtype_conversion jjtn000 = new ASTtype_conversion(JJTTYPE_CONVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      type_mark();
      jj_consume_token(158);
      expression();
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void type_declaration() throws ParseException {
    if (jj_2_127(2147483647)) {
      full_type_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        incomplete_type_declaration();
        break;
      default:
        jj_la1[266] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void type_definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANGE:
    case 158:
      scalar_type_definition();
      break;
    case ARRAY:
    case RECORD:
      composite_type_definition();
      break;
    case ACCESS:
      access_type_definition();
      break;
    case FILE:
      file_type_definition();
      break;
    case PROTECTED:
      protected_type_definition();
      break;
    default:
      jj_la1[267] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type_mark() throws ParseException {
    if (jj_2_128(2147483647)) {
      type_name();
    } else if (jj_2_129(2147483647)) {
      subtype_name();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void unconstrained_array_definition() throws ParseException {
 /*@bgen(jjtree) unconstrained_array_definition */
  ASTunconstrained_array_definition jjtn000 = new ASTunconstrained_array_definition(JJTUNCONSTRAINED_ARRAY_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      jj_consume_token(158);
      index_subtype_definition();
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[268] = jj_gen;
          break label_53;
        }
        jj_consume_token(160);
        index_subtype_definition();
      }
      jj_consume_token(159);
      jj_consume_token(OF);
      element_subtype_indication();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void use_clause() throws ParseException {
 /*@bgen(jjtree) use_clause */
  ASTuse_clause jjtn000 = new ASTuse_clause(JJTUSE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(USE);
      selected_name();
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 160:
          ;
          break;
        default:
          jj_la1[269] = jj_gen;
          break label_54;
        }
        jj_consume_token(160);
        selected_name();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void variable_assignment_statement() throws ParseException {
 /*@bgen(jjtree) variable_assignment_statement */
  ASTvariable_assignment_statement jjtn000 = new ASTvariable_assignment_statement(JJTVARIABLE_ASSIGNMENT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_130(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      target();
      jj_consume_token(ASSIGN);
      expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void variable_declaration() throws ParseException {
 /*@bgen(jjtree) variable_declaration */
  ASTvariable_declaration jjtn000 = new ASTvariable_declaration(JJTVARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARED:
        jj_consume_token(SHARED);
        break;
      default:
        jj_la1[270] = jj_gen;
        ;
      }
      jj_consume_token(VARIABLE);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[271] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void wait_statement() throws ParseException {
 /*@bgen(jjtree) wait_statement */
  ASTwait_statement jjtn000 = new ASTwait_statement(JJTWAIT_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_131(2147483647)) {
        jj_consume_token(COLON);
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      jj_consume_token(WAIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
        sensitivity_clause();
        break;
      default:
        jj_la1[272] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNTIL:
        condition_clause();
        break;
      default:
        jj_la1[273] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
        timeout_clause();
        break;
      default:
        jj_la1[274] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void waveform() throws ParseException {
 /*@bgen(jjtree) waveform */
  ASTwaveform jjtn000 = new ASTwaveform(JJTWAVEFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABS:
      case NEW:
      case NOT:
      case NULL:
      case based_literal:
      case basic_identifier:
      case bit_string_literal:
      case character_literal:
      case decimal_literal:
      case extended_identifier:
      case string_literal:
      case ADD:
      case SUB:
      case 158:
        waveform_element();
        label_55:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 160:
            ;
            break;
          default:
            jj_la1[275] = jj_gen;
            break label_55;
          }
          jj_consume_token(160);
          waveform_element();
        }
        break;
      case UNAFFECTED:
        jj_consume_token(UNAFFECTED);
        break;
      default:
        jj_la1[276] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void waveform_element() throws ParseException {
 /*@bgen(jjtree) waveform_element */
  ASTwaveform_element jjtn000 = new ASTwaveform_element(JJTWAVEFORM_ELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_132(2147483647)) {
        jj_consume_token(NULL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AFTER:
          jj_consume_token(AFTER);
          time_expression();
          break;
        default:
          jj_la1[277] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case NEW:
        case NOT:
        case NULL:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          value_expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AFTER:
            jj_consume_token(AFTER);
            time_expression();
            break;
          default:
            jj_la1[278] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[279] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtreeCloseNodeScope(jjtn000);
       }
    }
  }

/** 
 *Section 15: Simultaneous statements
 * 1076.1 extension
 */
  final public void simultaneous_statement_part() throws ParseException {
 /*@bgen(jjtree) simultaneous_statement_part */
  ASTsimultaneous_statement_part jjtn000 = new ASTsimultaneous_statement_part(JJTSIMULTANEOUS_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABS:
        case CASE:
        case IF:
        case IMPURE:
        case NEW:
        case NOT:
        case NULL:
        case PROCEDURAL:
        case PURE:
        case based_literal:
        case basic_identifier:
        case bit_string_literal:
        case character_literal:
        case decimal_literal:
        case extended_identifier:
        case string_literal:
        case ADD:
        case SUB:
        case 158:
          ;
          break;
        default:
          jj_la1[280] = jj_gen;
          break label_56;
        }
        simultaneous_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simultaneous_statement() throws ParseException {
    if (jj_2_133(2147483647)) {
      simple_simultaneous_statement();
    } else if (jj_2_134(2147483647)) {
      simultaneous_if_statement();
    } else if (jj_2_135(2147483647)) {
      simultaneous_case_statement();
    } else if (jj_2_136(4)) {
      simultaneous_procedural_statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case basic_identifier:
      case extended_identifier:
        simultaneous_null_statement();
        break;
      default:
        jj_la1[281] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simple_simultaneous_statement() throws ParseException {
 /*@bgen(jjtree) simple_simultaneous_statement */
  ASTsimple_simultaneous_statement jjtn000 = new ASTsimple_simultaneous_statement(JJTSIMPLE_SIMULTANEOUS_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_137(2147483647)) {
        label();
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPURE:
      case PURE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PURE:
          jj_consume_token(PURE);
          break;
        case IMPURE:
          jj_consume_token(IMPURE);
          break;
        default:
          jj_la1[282] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[283] = jj_gen;
        ;
      }
      simple_expression();
      jj_consume_token(165);
      simple_expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOLERANCE:
        tolerance_aspect();
        break;
      default:
        jj_la1[284] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simultaneous_if_statement() throws ParseException {
 /*@bgen(jjtree) simultaneous_if_statement */
  ASTsimultaneous_if_statement jjtn000 = new ASTsimultaneous_if_statement(JJTSIMULTANEOUS_IF_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        if_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[285] = jj_gen;
        ;
      }
      jj_consume_token(IF);
      condition();
      jj_consume_token(USE);
      simultaneous_statement_part();
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSIF:
          ;
          break;
        default:
          jj_la1[286] = jj_gen;
          break label_57;
        }
        jj_consume_token(ELSIF);
        condition();
        jj_consume_token(USE);
        simultaneous_statement_part();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        simultaneous_statement_part();
        break;
      default:
        jj_la1[287] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(USE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        if_label();
        break;
      default:
        jj_la1[288] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simultaneous_case_statement() throws ParseException {
 /*@bgen(jjtree) simultaneous_case_statement */
  ASTsimultaneous_case_statement jjtn000 = new ASTsimultaneous_case_statement(JJTSIMULTANEOUS_CASE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        case_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[289] = jj_gen;
        ;
      }
      jj_consume_token(CASE);
      expression();
      jj_consume_token(USE);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHEN:
          ;
          break;
        default:
          jj_la1[290] = jj_gen;
          break label_58;
        }
        simultaneous_alternative();
      }
      jj_consume_token(END);
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        case_label();
        break;
      default:
        jj_la1[291] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simultaneous_alternative() throws ParseException {
 /*@bgen(jjtree) simultaneous_alternative */
  ASTsimultaneous_alternative jjtn000 = new ASTsimultaneous_alternative(JJTSIMULTANEOUS_ALTERNATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHEN);
      choices();
      jj_consume_token(USE);
      simultaneous_statement_part();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void simultaneous_procedural_statement() throws ParseException {
 /*@bgen(jjtree) simultaneous_procedural_statement */
  ASTsimultaneous_procedural_statement jjtn000 = new ASTsimultaneous_procedural_statement(JJTSIMULTANEOUS_PROCEDURAL_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        procedural_label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[292] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPURE:
      case PURE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PURE:
          jj_consume_token(PURE);
          break;
        case IMPURE:
          jj_consume_token(IMPURE);
          break;
        default:
          jj_la1[293] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[294] = jj_gen;
        ;
      }
      jj_consume_token(PROCEDURAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      default:
        jj_la1[295] = jj_gen;
        ;
      }
      procedural_declarative_part();
      jj_consume_token(BEGIN);
      procedural_statement_part();
      jj_consume_token(END);
      jj_consume_token(PROCEDURAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        procedural_label();
        break;
      default:
        jj_la1[296] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// 1076.1 extension:
  final public void procedural_label() throws ParseException {
    label();
  }

// 1076.1 extension:
  final public void procedural_declarative_part() throws ParseException {
 /*@bgen(jjtree) procedural_declarative_part */
  ASTprocedural_declarative_part jjtn000 = new ASTprocedural_declarative_part(JJTPROCEDURAL_DECLARATIVE_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
        case ATTRIBUTE:
        case CONSTANT:
        case FUNCTION:
        case GROUP:
        case IMPURE:
        case PROCEDURE:
        case PURE:
        case SHARED:
        case SUBTYPE:
        case TYPE:
        case USE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[297] = jj_gen;
          break label_59;
        }
        procedural_declarative_item();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void procedural_declarative_item() throws ParseException {
    if (jj_2_138(2147483647)) {
      subprogram_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case IMPURE:
      case PROCEDURE:
      case PURE:
        subprogram_body();
        break;
      case TYPE:
        type_declaration();
        break;
      case SUBTYPE:
        subtype_declaration();
        break;
      case CONSTANT:
        constant_declaration();
        break;
      case SHARED:
      case VARIABLE:
        variable_declaration();
        break;
      case ALIAS:
        alias_declaration();
        break;
      default:
        jj_la1[298] = jj_gen;
        if (jj_2_139(2147483647)) {
          attribute_declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case USE:
            use_clause();
            break;
          default:
            jj_la1[299] = jj_gen;
            if (jj_2_140(2147483647)) {
              group_template_declaration();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case GROUP:
                group_declaration();
                break;
              default:
                jj_la1[300] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

/**
 * 1076.1 extension:
 */
  final public void procedural_statement_part() throws ParseException {
 /*@bgen(jjtree) procedural_statement_part */
  ASTprocedural_statement_part jjtn000 = new ASTprocedural_statement_part(JJTPROCEDURAL_STATEMENT_PART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BREAK:
        case CASE:
        case EXIT:
        case FOR:
        case IF:
        case LOOP:
        case NEXT:
        case NULL:
        case REPORT:
        case RETURN:
        case WAIT:
        case WHILE:
        case basic_identifier:
        case extended_identifier:
        case string_literal:
        case COLON:
        case 158:
          ;
          break;
        default:
          jj_la1[301] = jj_gen;
          break label_60;
        }
        sequential_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// 1076.1 extension:
  final public void simultaneous_null_statement() throws ParseException {
 /*@bgen(jjtree) simultaneous_null_statement */
  ASTsimultaneous_null_statement jjtn000 = new ASTsimultaneous_null_statement(JJTSIMULTANEOUS_NULL_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case basic_identifier:
      case extended_identifier:
        label();
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[302] = jj_gen;
        ;
      }
      jj_consume_token(NULL);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

//
// parts of grammar, which have to be checked during semantic analysis
// by semantic lookahead:
//
  final public void block_label() throws ParseException {
    label();
  }

  final public void block_statement_label() throws ParseException {
    label();
  }

  final public void case_label() throws ParseException {
    label();
  }

  final public void generate_label() throws ParseException {
    label();
  }

  final public void generate_statement_label() throws ParseException {
    label();
  }

  final public void if_label() throws ParseException {
    label();
  }

  final public void instantiation_label() throws ParseException {
    label();
  }

  final public void loop_label() throws ParseException {
    label();
  }

  final public void process_label() throws ParseException {
    label();
  }

  final public void architecture_simple_name() throws ParseException {
    simple_name();
  }

  final public void attribute_simple_name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case basic_identifier:
    case extended_identifier:
      simple_name();
      break;
    case RANGE:
      jj_consume_token(RANGE);
      break;
    default:
      jj_la1[303] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void component_simple_name() throws ParseException {
    simple_name();
  }

  final public void configuration_simple_name() throws ParseException {
    simple_name();
  }

  final public void element_simple_name() throws ParseException {
    simple_name();
  }

  final public void entity_simple_name() throws ParseException {
    simple_name();
  }

  final public void package_simple_name() throws ParseException {
    simple_name();
  }

  final public void architecture_name() throws ParseException {
    name();
  }

  final public void entity_name() throws ParseException {
    name();
  }

  final public void file_name() throws ParseException {
    name();
  }

  final public void function_name() throws ParseException {
    name();
  }

  final public void configuration_name() throws ParseException {
    name();
  }

  final public void component_name() throws ParseException {
    name();
  }

  final public void generic_name() throws ParseException {
    name();
  }

  final public void group_template_name() throws ParseException {
    name();
  }

  final public void parameter_name() throws ParseException {
    name();
  }

  final public void physical_type_simple_name() throws ParseException {
    simple_name();
  }

  final public void port_name() throws ParseException {
    name();
  }

  final public void procedure_name() throws ParseException {
    name();
  }

  final public void range_attribute_name() throws ParseException {
    name();
  }

  final public void signal_name() throws ParseException {
    name();
  }

//
// Name, der einen Typen bezeichnet...
//
  final public void type_name() throws ParseException {
    name();
  }

// 1076.1 extension:
  final public void record_nature_simple_name() throws ParseException {
    simple_name();
  }

  final public void record_type_simple_name() throws ParseException {
    simple_name();
  }

  final public void resolution_function_name() throws ParseException {
    name();
  }

  final public void subtype_name() throws ParseException {
    name();
  }

  final public void unit_name() throws ParseException {
    name();
  }

  final public void variable_name() throws ParseException {
    name();
  }

  final public void architecture_identifier() throws ParseException {
    identifier();
  }

  final public void static_expression() throws ParseException {
    expression();
  }

  final public void boolean_expression() throws ParseException {
    expression();
  }

  final public void file_open_kind_expression() throws ParseException {
    expression();
  }

  final public void guard_expression() throws ParseException {
    expression();
  }

  final public void time_expression() throws ParseException {
    expression();
  }

// 1076.1 extension:
  final public void time_or_real_expression() throws ParseException {
    expression();
  }

  final public void value_expression() throws ParseException {
    expression();
  }

  final public void string_expression() throws ParseException {
    expression();
  }

  final public void guarded_signal_list() throws ParseException {
    signal_list();
  }

  final public void parameter_association_list() throws ParseException {
    association_list();
  }

  final public void port_association_list() throws ParseException {
    association_list();
  }

  final public void generic_association_list() throws ParseException {
    association_list();
  }

  final public void generic_interface_list() throws ParseException {
    interface_list();
  }

  final public void parameter_interface_list() throws ParseException {
    interface_list();
  }

  final public void port_interface_list() throws ParseException {
    interface_list();
  }

//
// fraglich:
//
  final public void formal_port_clause() throws ParseException {
    port_clause();
  }

  final public void local_port_clause() throws ParseException {
    port_clause();
  }

  final public void formal_generic_clause() throws ParseException {
    generic_clause();
  }

  final public void local_generic_clause() throws ParseException {
    generic_clause();
  }

  final public void element_subtype_indication() throws ParseException {
    subtype_indication();
  }

  final public void discrete_subtype_indication() throws ParseException {
    subtype_indication();
  }

  final public void loop_parameter_specification() throws ParseException {
    parameter_specification();
  }

  final public void generate_parameter_specification() throws ParseException {
    parameter_specification();
  }

  final public void passive_concurrent_procedure_call_statement() throws ParseException {
    concurrent_procedure_call_statement();
  }

  final public void passive_process_statement() throws ParseException {
    process_statement();
  }

  final public void magnitude_simple_expression() throws ParseException {
    simple_expression();
  }

  final public void phase_simple_expression() throws ParseException {
    simple_expression();
  }

  final public void nature_name() throws ParseException {
    name();
  }

  final public void subnature_name() throws ParseException {
    name();
  }

/**
 * 1076.1 extension:
 */
  final public void terminal_name() throws ParseException {
    name();
  }

/**
 * 1076.1 extension:
 */
  final public void quantity_name() throws ParseException {
    name();
  }

/**
 * 1076.1 extension:
 */
  final public void plus_terminal_name() throws ParseException {
    name();
  }

/**
 * 1076.1 extension:
 */
  final public void minus_terminal_name() throws ParseException {
    name();
  }

/**
 * still missing:
 */
  final public void shared_variable_declaration() throws ParseException {
 /*@bgen(jjtree) shared_variable_declaration */
  ASTshared_variable_declaration jjtn000 = new ASTshared_variable_declaration(JJTSHARED_VARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARED:
        jj_consume_token(SHARED);
        break;
      default:
        jj_la1[304] = jj_gen;
        ;
      }
      jj_consume_token(VARIABLE);
      identifier_list();
      jj_consume_token(COLON);
      subtype_indication();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        break;
      default:
        jj_la1[305] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  void error_skipto(int kind, String message) throws ParseException {
 /*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtreeOpenNodeScope(jjtn000);
try {errs.Error(message,null);
  Token t;
  do
  {
    t = getNextToken();
  } while ((t.kind != kind) && t.next != null);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
}
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_3R_331() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(RANGE)) return true;
    if (jj_scan_token(163)) return true;
    return false;
  }

  private boolean jj_3R_600() {
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_599() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_507() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_599()) {
    jj_scanpos = xsp;
    if (jj_3R_600()) return true;
    }
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_774() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_481()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_607() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_663() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_773() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_772() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_522() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_317()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_471() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_522()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_277()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_772()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_773()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    xsp = jj_scanpos;
    if (jj_3R_774()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_382()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(extended_identifier)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(basic_identifier)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_669() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_668()) return true;
    return false;
  }

  private boolean jj_3R_518() {
    if (jj_3R_611()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_632()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_633()) return true;
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_259()) return true;
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_633() {
    if (jj_3R_668()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_669()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_699() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_668() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_699()) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_643() {
    if (jj_scan_token(GENERIC)) return true;
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_680()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3R_705() {
    if (jj_3R_751()) return true;
    return false;
  }

  private boolean jj_3R_687() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_646() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_687()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_675() {
    if (jj_scan_token(GENERIC)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_705()) return true;
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_3R_480()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) return true;
    }
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_420()) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_411()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_139() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_572() {
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    if (jj_scan_token(BREAK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_571() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_570() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_569() {
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_568() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_50() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_567() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_566() {
    if (jj_3R_613()) return true;
    return false;
  }

  private boolean jj_3R_565() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_564() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3R_563() {
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_562() {
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_185()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_186()) return true;
    if (jj_scan_token(GENERATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(GENERATE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_561() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_484() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_561()) {
    jj_scanpos = xsp;
    if (jj_3R_562()) {
    jj_scanpos = xsp;
    if (jj_3R_563()) {
    jj_scanpos = xsp;
    if (jj_3R_564()) {
    jj_scanpos = xsp;
    if (jj_3R_565()) {
    jj_scanpos = xsp;
    if (jj_3R_566()) {
    jj_scanpos = xsp;
    if (jj_3R_567()) {
    jj_scanpos = xsp;
    if (jj_3R_568()) {
    jj_scanpos = xsp;
    if (jj_3R_569()) {
    jj_scanpos = xsp;
    if (jj_3R_570()) {
    jj_scanpos = xsp;
    if (jj_3R_571()) {
    jj_scanpos = xsp;
    if (jj_3R_572()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_686() {
    if (jj_3R_409()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_3R_484()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_323() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_410()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_606() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_694()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_409()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) jj_scanpos = xsp;
    if (jj_scan_token(PROCEDURAL)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_323()) return true;
    if (jj_scan_token(BEGIN)) return true;
    if (jj_3R_324()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(PROCEDURAL)) return true;
    xsp = jj_scanpos;
    if (jj_3R_686()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_502() {
    if (jj_3R_594()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(USE)) return true;
    if (jj_3R_483()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_685() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_408()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_401()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(USE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_320()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_742() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  private boolean jj_3R_762() {
    if (jj_scan_token(FILE)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_696() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_742()) jj_scanpos = xsp;
    if (jj_3R_741()) return true;
    return false;
  }

  private boolean jj_3R_684() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_483()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_683() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(USE)) return true;
    if (jj_3R_483()) return true;
    return false;
  }

  private boolean jj_3R_695() {
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_740()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_741()) return true;
    return false;
  }

  private boolean jj_3R_660() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_695()) {
    jj_scanpos = xsp;
    if (jj_3R_696()) return true;
    }
    return false;
  }

  private boolean jj_3R_682() {
    if (jj_3R_317()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_645() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_682()) jj_scanpos = xsp;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(USE)) return true;
    if (jj_3R_483()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_683()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_684()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(USE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_685()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_741() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_503() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_625() {
    if (jj_3R_660()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_scan_token(FILE)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_625()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_scan_token(165)) return true;
    if (jj_3R_90()) return true;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(USE)) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_133() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_592() {
    if (jj_3R_646()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(ABS)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_591() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_598() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_595()) return true;
    return false;
  }

  private boolean jj_3R_590() {
    if (jj_3R_645()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_596() {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_595()) return true;
    return false;
  }

  private boolean jj_3R_589() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_497() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_589()) {
    jj_scanpos = xsp;
    if (jj_3R_590()) {
    jj_scanpos = xsp;
    if (jj_3R_591()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3R_592()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_327()) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_560() {
    if (jj_3R_497()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_438()) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_483() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_560()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_400()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_506() {
    if (jj_3R_597()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_598()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    if (jj_scan_token(EXIT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_282()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_505() {
    if (jj_scan_token(NULL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_596()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_438() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_505()) {
    jj_scanpos = xsp;
    if (jj_3R_506()) return true;
    }
    return false;
  }

  private boolean jj_3R_650() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_263()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_438()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_439()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_399()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    if (jj_scan_token(WAIT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_266()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_789() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_788() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_764() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_788()) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_3R_789()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_130() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_175()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_613() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_3R_650()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_652() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_744() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_743()) return true;
    return false;
  }

  private boolean jj_3R_615() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_652()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_630() {
    if (jj_3R_664()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_474()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(USE)) return true;
    if (jj_3R_441()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_442()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_697() {
    if (jj_3R_743()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_744()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_664() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_697()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_739() {
    if (jj_3R_763()) return true;
    return false;
  }

  private boolean jj_3R_738() {
    if (jj_3R_762()) return true;
    return false;
  }

  private boolean jj_3R_737() {
    if (jj_3R_761()) return true;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_736() {
    if (jj_3R_760()) return true;
    return false;
  }

  private boolean jj_3R_735() {
    if (jj_3R_759()) return true;
    return false;
  }

  private boolean jj_3R_694() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_735()) {
    jj_scanpos = xsp;
    if (jj_3R_736()) {
    jj_scanpos = xsp;
    if (jj_3R_737()) {
    jj_scanpos = xsp;
    if (jj_3R_738()) {
    jj_scanpos = xsp;
    if (jj_3R_739()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_743() {
    if (jj_3R_764()) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_515() {
    if (jj_3R_607()) return true;
    return false;
  }

  private boolean jj_3R_673() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_514() {
    if (jj_3R_606()) return true;
    return false;
  }

  private boolean jj_3R_455() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_514()) {
    jj_scanpos = xsp;
    if (jj_3R_515()) return true;
    }
    return false;
  }

  private boolean jj_3R_703() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_702() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_672() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_702()) {
    jj_scanpos = xsp;
    if (jj_3R_703()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_674() {
    if (jj_scan_token(TOLERANCE)) return true;
    if (jj_3R_296()) return true;
    if (jj_scan_token(ACROSS)) return true;
    if (jj_3R_296()) return true;
    if (jj_scan_token(THROUGH)) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_3R_156()) return true;
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_635() {
    if (jj_3R_672()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_673()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_674()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_477()) return true;
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_scan_token(SUBNATURE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_635()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_157()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_671() {
    if (jj_3R_701()) return true;
    return false;
  }

  private boolean jj_3R_670() {
    if (jj_3R_700()) return true;
    return false;
  }

  private boolean jj_3R_634() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_670()) {
    jj_scanpos = xsp;
    if (jj_3R_671()) return true;
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_scan_token(NATURE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_634()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_472()) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_3R_473()) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_750() {
    if (jj_scan_token(NOISE)) return true;
    if (jj_3R_769()) return true;
    return false;
  }

  private boolean jj_3R_749() {
    if (jj_scan_token(SPECTRUM)) return true;
    if (jj_3R_769()) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_770()) return true;
    return false;
  }

  private boolean jj_3R_704() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_749()) {
    jj_scanpos = xsp;
    if (jj_3R_750()) return true;
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_233()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    if (jj_scan_token(THROUGH)) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_233()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    if (jj_scan_token(ACROSS)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_612() {
    if (jj_scan_token(QUANTITY)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    if (jj_3R_704()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_393()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(QUANTITY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(QUANTITY)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_393()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_394()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_521() {
    if (jj_3R_612()) return true;
    return false;
  }

  private boolean jj_3R_520() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_519() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_519()) {
    jj_scanpos = xsp;
    if (jj_3R_520()) {
    jj_scanpos = xsp;
    if (jj_3R_521()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_474()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_542() {
    if (jj_scan_token(TERMINAL)) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_541() {
    if (jj_scan_token(NATURE)) return true;
    return false;
  }

  private boolean jj_3R_540() {
    if (jj_scan_token(SUBNATURE)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_539() {
    if (jj_scan_token(FILE)) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_538() {
    if (jj_scan_token(GROUP)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(TOLERANCE)) return true;
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_537() {
    if (jj_scan_token(UNITS)) return true;
    return false;
  }

  private boolean jj_3R_536() {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_535() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_150()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_534() {
    if (jj_scan_token(COMPONENT)) return true;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_533() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_532() {
    if (jj_scan_token(SIGNAL)) return true;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_531() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_68()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_530() {
    if (jj_scan_token(SUBTYPE)) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_529() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_528() {
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_448()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_527() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_526() {
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_3R_150()) return true;
    if (jj_3R_68()) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_525() {
    if (jj_scan_token(CONFIGURATION)) return true;
    return false;
  }

  private boolean jj_3R_524() {
    if (jj_scan_token(ARCHITECTURE)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_150()) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_447()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_523() {
    if (jj_scan_token(ENTITY)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_474() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_523()) {
    jj_scanpos = xsp;
    if (jj_3R_524()) {
    jj_scanpos = xsp;
    if (jj_3R_525()) {
    jj_scanpos = xsp;
    if (jj_3R_526()) {
    jj_scanpos = xsp;
    if (jj_3R_527()) {
    jj_scanpos = xsp;
    if (jj_3R_528()) {
    jj_scanpos = xsp;
    if (jj_3R_529()) {
    jj_scanpos = xsp;
    if (jj_3R_530()) {
    jj_scanpos = xsp;
    if (jj_3R_531()) {
    jj_scanpos = xsp;
    if (jj_3R_532()) {
    jj_scanpos = xsp;
    if (jj_3R_533()) {
    jj_scanpos = xsp;
    if (jj_3R_534()) {
    jj_scanpos = xsp;
    if (jj_3R_535()) {
    jj_scanpos = xsp;
    if (jj_3R_536()) {
    jj_scanpos = xsp;
    if (jj_3R_537()) {
    jj_scanpos = xsp;
    if (jj_3R_538()) {
    jj_scanpos = xsp;
    if (jj_3R_539()) {
    jj_scanpos = xsp;
    if (jj_3R_540()) {
    jj_scanpos = xsp;
    if (jj_3R_541()) {
    jj_scanpos = xsp;
    if (jj_3R_542()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_68()) return true;
    if (jj_3R_151()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_446()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_150()) return true;
    if (jj_3R_68()) return true;
    if (jj_3R_151()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_445()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_765() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_746() {
    if (jj_scan_token(CONFIGURATION)) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_745() {
    if (jj_scan_token(ENTITY)) return true;
    if (jj_3R_331()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_765()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_698() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_745()) {
    jj_scanpos = xsp;
    if (jj_3R_746()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_502()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_821() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_scan_token(SUBTYPE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_215()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_99()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3R_657() {
    if (jj_3R_480()) return true;
    return false;
  }

  private boolean jj_3R_818() {
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_821()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_618() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_657()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_502()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_3R_99()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_90()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_435() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) jj_scanpos = xsp;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_433()) return true;
    xsp = jj_scanpos;
    if (jj_3R_436()) jj_scanpos = xsp;
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_3R_433()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_693() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_692() {
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3R_658() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_692()) {
    jj_scanpos = xsp;
    if (jj_3R_693()) return true;
    }
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_113() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_656() {
    if (jj_3R_691()) return true;
    return false;
  }

  private boolean jj_3R_617() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_656()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_scan_token(DISCONNECT)) return true;
    if (jj_3R_518()) return true;
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_595()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_734() {
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3R_620() {
    if (jj_3R_433()) return true;
    return false;
  }

  private boolean jj_3R_733() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_732() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  private boolean jj_3R_731() {
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_730() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_729() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_501() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_728() {
    if (jj_3R_460()) return true;
    return false;
  }

  private boolean jj_3R_500() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_433() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_500()) {
    jj_scanpos = xsp;
    if (jj_3R_501()) return true;
    }
    return false;
  }

  private boolean jj_3R_727() {
    if (jj_3R_613()) return true;
    return false;
  }

  private boolean jj_3R_726() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3R_725() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3R_724() {
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_723() {
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_722() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_691() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_722()) {
    jj_scanpos = xsp;
    if (jj_3R_723()) {
    jj_scanpos = xsp;
    if (jj_3R_724()) {
    jj_scanpos = xsp;
    if (jj_3R_725()) {
    jj_scanpos = xsp;
    if (jj_3R_726()) {
    jj_scanpos = xsp;
    if (jj_3R_727()) {
    jj_scanpos = xsp;
    if (jj_3R_728()) {
    jj_scanpos = xsp;
    if (jj_3R_729()) {
    jj_scanpos = xsp;
    if (jj_3R_730()) {
    jj_scanpos = xsp;
    if (jj_3R_731()) {
    jj_scanpos = xsp;
    if (jj_3R_732()) {
    jj_scanpos = xsp;
    if (jj_3R_733()) {
    jj_scanpos = xsp;
    if (jj_3R_734()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_scan_token(TO)) return true;
    if (jj_3R_482()) return true;
    return false;
  }

  private boolean jj_3R_619() {
    if (jj_3R_658()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_198()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_504() {
    if (jj_scan_token(REJECT)) return true;
    if (jj_3R_595()) return true;
    return false;
  }

  private boolean jj_3R_437() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_504()) jj_scanpos = xsp;
    if (jj_scan_token(INERTIAL)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3R_437()) return true;
    }
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_3R_198()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_617()) return true;
    if (jj_scan_token(BEGIN)) return true;
    if (jj_3R_618()) return true;
    if (jj_scan_token(END)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_619()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_620()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_406()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_470() {
    if (jj_scan_token(TERMINAL)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_635()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_623() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_3R_147()) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_341()) return true;
    return false;
  }

  private boolean jj_3R_766() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_622() {
    if (jj_3R_659()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_690() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_766()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_649() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_690()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_659() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3R_817() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_405()) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_771() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_621() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_622()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_623()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_scan_token(CONSTANT)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_621()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_517()) return true;
    if (jj_3R_631()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_651() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_614() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_651()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_scan_token(LE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_771()) jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_3R_511()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) return true;
    }
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(ROR)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(ROL)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(SRA)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(SLA)) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(SRL)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(SLL)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_146()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_559() {
    if (jj_3R_616()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_208()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_558() {
    if (jj_3R_615()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_93()) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_557() {
    if (jj_3R_614()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_93()) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_499() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_480() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3R_557()) {
    jj_scanpos = xsp;
    if (jj_3R_558()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3R_559()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_586() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_480()) return true;
    return false;
  }

  private boolean jj_3R_585() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_404()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_584() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_495() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_584()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_585()) {
    jj_scanpos = xsp;
    if (jj_3R_586()) return true;
    }
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_499()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_583() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_494() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_583()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_432()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_208()) return true;
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_208()) return true;
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_419()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_509() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_785() {
    if (jj_3R_798()) return true;
    return false;
  }

  private boolean jj_3R_784() {
    if (jj_3R_797()) return true;
    return false;
  }

  private boolean jj_3R_760() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_784()) {
    jj_scanpos = xsp;
    if (jj_3R_785()) return true;
    }
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_93()) return true;
    if (jj_3R_329()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_517() {
    if (jj_3R_610()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_748() {
    if (jj_3R_768()) return true;
    return false;
  }

  private boolean jj_3R_629() {
    if (jj_3R_663()) return true;
    return false;
  }

  private boolean jj_3R_510() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_747() {
    if (jj_3R_767()) return true;
    return false;
  }

  private boolean jj_3R_701() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_747()) {
    jj_scanpos = xsp;
    if (jj_3R_748()) return true;
    }
    return false;
  }

  private boolean jj_3R_508() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_588() {
    if (jj_3R_644()) return true;
    return false;
  }

  private boolean jj_3R_587() {
    if (jj_3R_643()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_508()) {
    jj_scanpos = xsp;
    if (jj_3R_509()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_510()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_scan_token(BODY)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(ARCHITECTURE)) return true;
    return false;
  }

  private boolean jj_3R_602() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_496() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_587()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_588()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_628() {
    if (jj_3R_662()) return true;
    return false;
  }

  private boolean jj_3R_601() {
    if (jj_3R_631()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_815() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_120()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_627() {
    if (jj_3R_661()) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(COMPONENT)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_627()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_628()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(COMPONENT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_629()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(162)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_783() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(UNITS)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_511() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_517()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_601()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_602()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_782() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_777() {
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_781() {
    if (jj_3R_796()) return true;
    return false;
  }

  private boolean jj_3R_759() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_781()) {
    jj_scanpos = xsp;
    if (jj_3R_782()) {
    jj_scanpos = xsp;
    if (jj_3R_783()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_776() {
    if (jj_3R_775()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_449()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_700() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(ACROSS)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(THROUGH)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    if (jj_scan_token(RETURN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_775() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RARROW)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(SEVERITY)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_655() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    if (jj_scan_token(REPORT)) return true;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_401()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_775()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_776()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CASE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_777()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_490() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_489() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_scan_token(LO)) return true;
    return false;
  }

  private boolean jj_3R_486() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_412() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_485()) {
    jj_scanpos = xsp;
    if (jj_3R_486()) {
    jj_scanpos = xsp;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) {
    jj_scanpos = xsp;
    if (jj_3R_489()) {
    jj_scanpos = xsp;
    if (jj_3R_490()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_593() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_328()) return true;
    if (jj_scan_token(USE)) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_430()) return true;
    return false;
  }

  private boolean jj_3R_810() {
    if (jj_3R_819()) return true;
    return false;
  }

  private boolean jj_3R_654() {
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3R_498() {
    if (jj_3R_593()) return true;
    return false;
  }

  private boolean jj_3R_430() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_498()) jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    if (jj_scan_token(RARROW)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_412()) return true;
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3R_793() {
    if (jj_3R_803()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_325()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_326()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_577() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_430()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_431()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_809() {
    if (jj_3R_818()) return true;
    return false;
  }

  private boolean jj_3R_798() {
    if (jj_scan_token(RECORD)) return true;
    Token xsp;
    if (jj_3R_809()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_809()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(RECORD)) return true;
    xsp = jj_scanpos;
    if (jj_3R_810()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_573() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_636()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_653() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_507()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_792() {
    if (jj_3R_802()) return true;
    return false;
  }

  private boolean jj_3R_616() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_653()) jj_scanpos = xsp;
    if (jj_scan_token(BREAK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_654()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_655()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_768() {
    if (jj_scan_token(RECORD)) return true;
    Token xsp;
    if (jj_3R_792()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_792()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(RECORD)) return true;
    xsp = jj_scanpos;
    if (jj_3R_793()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_90()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_640() {
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(RANGE)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_576() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_640()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_90()) return true;
    if (jj_3R_97()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_678() {
    if (jj_3R_644()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_676() {
    if (jj_3R_643()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_3R_174()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(BLOCK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_573()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_574()) return true;
    if (jj_3R_575()) return true;
    if (jj_scan_token(BEGIN)) return true;
    if (jj_3R_576()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(BLOCK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_577()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(161)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_440()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_787() {
    if (jj_3R_799()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_786() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_763() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_786()) {
    jj_scanpos = xsp;
    if (jj_3R_787()) return true;
    }
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_812() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_638() {
    if (jj_3R_677()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_678()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_820() {
    if (jj_3R_822()) return true;
    return false;
  }

  private boolean jj_3R_637() {
    if (jj_3R_675()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_676()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_811() {
    Token xsp;
    if (jj_3R_820()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_820()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_574() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_637()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_638()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_825() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_824() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_639() {
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_823() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_822() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_823()) {
    jj_scanpos = xsp;
    if (jj_3R_824()) {
    jj_scanpos = xsp;
    if (jj_3R_825()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_575() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_639()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_799() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_3R_811()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(PROTECTED)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_812()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_470()) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_469()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_475()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    Token xsp;
    if (jj_3R_395()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_395()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_467()) return true;
    return false;
  }

  private boolean jj_3R_555() {
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_554() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3R_553() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_552() {
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_551() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_465()) return true;
    return false;
  }

  private boolean jj_3R_550() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_464()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_549() {
    if (jj_3R_460()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3R_548() {
    if (jj_3R_613()) return true;
    return false;
  }

  private boolean jj_3R_547() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_546() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_462()) return true;
    return false;
  }

  private boolean jj_3R_545() {
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_544() {
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_460()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_459()) return true;
    return false;
  }

  private boolean jj_3R_582() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_3R_458()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3R_543() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3R_475() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_543()) {
    jj_scanpos = xsp;
    if (jj_3R_544()) {
    jj_scanpos = xsp;
    if (jj_3R_545()) {
    jj_scanpos = xsp;
    if (jj_3R_546()) {
    jj_scanpos = xsp;
    if (jj_3R_547()) {
    jj_scanpos = xsp;
    if (jj_3R_548()) {
    jj_scanpos = xsp;
    if (jj_3R_549()) {
    jj_scanpos = xsp;
    if (jj_3R_550()) {
    jj_scanpos = xsp;
    if (jj_3R_551()) {
    jj_scanpos = xsp;
    if (jj_3R_552()) {
    jj_scanpos = xsp;
    if (jj_3R_553()) {
    jj_scanpos = xsp;
    if (jj_3R_554()) {
    jj_scanpos = xsp;
    if (jj_3R_555()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) {
    jj_scanpos = xsp;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_scan_token(BODY)) return true;
    if (jj_3R_260()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_scan_token(BODY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_212()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_642() {
    if (jj_3R_480()) return true;
    return false;
  }

  private boolean jj_3R_667() {
    if (jj_3R_644()) return true;
    return false;
  }

  private boolean jj_3R_581() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_642()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_666() {
    if (jj_3R_643()) return true;
    return false;
  }

  private boolean jj_3R_665() {
    if (jj_scan_token(USE)) return true;
    if (jj_3R_698()) return true;
    return false;
  }

  private boolean jj_3R_631() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_665()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_666()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_667()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_804() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_579() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_432()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_578() {
    if (jj_3R_175()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_493() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_578()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_579()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_580()) return true;
    if (jj_scan_token(BEGIN)) return true;
    if (jj_3R_581()) return true;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_582()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_463() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_3R_385()) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_630()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_641() {
    if (jj_3R_679()) return true;
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_452()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_580() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_641()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_719() {
    if (jj_3R_466()) return true;
    return false;
  }

  private boolean jj_3R_718() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_717() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_716() {
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_471()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_715() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_714() {
    if (jj_3R_461()) return true;
    return false;
  }

  private boolean jj_3R_713() {
    if (jj_3R_460()) return true;
    return false;
  }

  private boolean jj_3R_712() {
    if (jj_3R_613()) return true;
    return false;
  }

  private boolean jj_3R_711() {
    if (jj_3R_457()) return true;
    return false;
  }

  private boolean jj_3R_710() {
    if (jj_3R_456()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_709() {
    if (jj_3R_455()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_82()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_708() {
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_707() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_679() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_707()) {
    jj_scanpos = xsp;
    if (jj_3R_708()) {
    jj_scanpos = xsp;
    if (jj_3R_709()) {
    jj_scanpos = xsp;
    if (jj_3R_710()) {
    jj_scanpos = xsp;
    if (jj_3R_711()) {
    jj_scanpos = xsp;
    if (jj_3R_712()) {
    jj_scanpos = xsp;
    if (jj_3R_713()) {
    jj_scanpos = xsp;
    if (jj_3R_714()) {
    jj_scanpos = xsp;
    if (jj_3R_715()) {
    jj_scanpos = xsp;
    if (jj_3R_716()) {
    jj_scanpos = xsp;
    if (jj_3R_717()) {
    jj_scanpos = xsp;
    if (jj_3R_718()) {
    jj_scanpos = xsp;
    if (jj_3R_719()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_452()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_453()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_512() {
    if (jj_3R_82()) return true;
    if (jj_scan_token(RARROW)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_452() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_512()) jj_scanpos = xsp;
    if (jj_3R_513()) return true;
    return false;
  }

  private boolean jj_3R_813() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_176()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(SEVERITY)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(REPORT)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_808() {
    if (jj_3R_817()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_358()) return true;
    return false;
  }

  private boolean jj_3R_807() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_797() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_807()) {
    jj_scanpos = xsp;
    if (jj_3R_808()) return true;
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_801() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_3R_405()) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_635()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_800() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_813()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_635()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_791() {
    if (jj_3R_801()) return true;
    return false;
  }

  private boolean jj_3R_790() {
    if (jj_3R_800()) return true;
    return false;
  }

  private boolean jj_3R_767() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_790()) {
    jj_scanpos = xsp;
    if (jj_3R_791()) return true;
    }
    return false;
  }

  private boolean jj_3R_644() {
    if (jj_scan_token(PORT)) return true;
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_681()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_806() {
    if (jj_3R_816()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_706() {
    if (jj_3R_752()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_497()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_677() {
    if (jj_scan_token(PORT)) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_706()) return true;
    if (jj_scan_token(159)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_175()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_174()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_3R_496()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_805() {
    if (jj_3R_815()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_3R_495()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_121()) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_3R_494()) return true;
    return false;
  }

  private boolean jj_3R_796() {
    if (jj_3R_131()) return true;
    if (jj_scan_token(UNITS)) return true;
    if (jj_3R_804()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_805()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(UNITS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_806()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_493()) return true;
    return false;
  }

  private boolean jj_3R_421() {
    if (jj_3R_492()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) {
    jj_scanpos = xsp;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_491() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_450()) {
    jj_scanpos = xsp;
    if (jj_3R_451()) return true;
    }
    return false;
  }

  private boolean jj_3R_624() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_609() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_608() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_516() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_608()) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_3R_609()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_626() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_scan_token(ALIAS)) return true;
    if (jj_3R_516()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_626()) jj_scanpos = xsp;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_125()) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_257()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_459() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_3R_624()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_605() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_604() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_603() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(158)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_513() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_603()) {
    jj_scanpos = xsp;
    if (jj_3R_604()) {
    jj_scanpos = xsp;
    if (jj_3R_605()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_761() {
    if (jj_scan_token(ACCESS)) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    return false;
  }

  private boolean jj_3R_770() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_769() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    if (jj_scan_token(NEXT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_814() {
    if (jj_3R_635()) return true;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_491()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_556() {
    if (jj_3R_491()) return true;
    return false;
  }

  private boolean jj_3R_802() {
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_814()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(164)) return true;
    if (jj_3R_387()) return true;
    return false;
  }

  private boolean jj_3R_661() {
    if (jj_3R_675()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(161)) return true;
    if (jj_3R_385()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_662() {
    if (jj_3R_677()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_752() {
    if (jj_3R_647()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_594() {
    if (jj_3R_647()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_751() {
    if (jj_3R_647()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_680() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_778() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_681() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_403()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_402()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_611() {
    if (jj_3R_649()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    if (jj_scan_token(LOOP)) return true;
    if (jj_3R_277()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(LOOP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_778()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_scan_token(XNOR)) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_scan_token(NOR)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(NAND)) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) {
    jj_scanpos = xsp;
    if (jj_3R_416()) {
    jj_scanpos = xsp;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_597() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_595() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_636() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_740() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_556()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_478()) {
    jj_scanpos = xsp;
    if (jj_3R_479()) return true;
    }
    return false;
  }

  private boolean jj_3R_478() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_689() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_688()) return true;
    return false;
  }

  private boolean jj_3R_795() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_384()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_384()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_819() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_647() {
    if (jj_3R_688()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_689()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_803() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(FILE)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_688() {
    if (jj_3R_720()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_794() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    return false;
  }

  private boolean jj_3R_780() {
    if (jj_scan_token(QUANTITY)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_794()) jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_3R_795()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_779() {
    if (jj_scan_token(TERMINAL)) return true;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_635()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_758() {
    if (jj_3R_780()) return true;
    return false;
  }

  private boolean jj_3R_757() {
    if (jj_3R_779()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_816() {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_756() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_755() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_754() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_753() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_720() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_753()) {
    jj_scanpos = xsp;
    if (jj_3R_754()) {
    jj_scanpos = xsp;
    if (jj_3R_755()) {
    jj_scanpos = xsp;
    if (jj_3R_756()) {
    jj_scanpos = xsp;
    if (jj_3R_757()) {
    jj_scanpos = xsp;
    if (jj_3R_758()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_721() {
    if (jj_scan_token(160)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_632() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(158)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(159)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_648() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_721()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_610() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_648()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(CONFIGURATION)) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(ENTITY)) return true;
    if (jj_3R_331()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public VhdlParserCoreTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[306];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x1a020800,0x1210080,0x1000080,0x8000,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa000800,0x10020000,0x0,0x1a020800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1210080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4004000,0x0,0x20000000,0x80,0x4000000,0xe004000,0x0,0x0,0x40000,0x0,0x0,0x8000800,0x10020000,0x0,0x8000,0x0,0x0,0x18020800,0x0,0x0,0x0,0x1000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x1a020800,0x1210080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x40000000,0x0,0x0,0x80,0x0,0x2000000,0x0,0x6000000,0x0,0x1000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x800000,0x0,0x0,0x400000,0x0,0x0,0x4000,0x0,0x0,0x2000,0x0,0x0,0x0,0x80,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8000800,0x0,0x8000800,0x0,0x0,0xa000800,0x10020000,0x0,0x1a020800,0x0,0x0,0x0,0x0,0x4000000,0x0,0x8000800,0x20000,0x0,0x8020800,0x0,0x0,0x0,0x0,0x0,0x0,0x1210000,0x0,0x8000800,0x20000,0x0,0x8020800,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x1210000,0x200000,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x8000800,0x20000,0x0,0x8020800,0x0,0x0,0x0,0x0,0x0,0x0,0x1210000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x8100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x400,0x400,0x80,0x1000080,0x0,0x0,0x0,0x0,0x0,0x80000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8020800,0x8000800,0x20000,0x0,0x1210000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x62000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000938,0x62000c00,0x62000c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x10,0x828,0x10,0x1000100,0x1000938,0x80,0x80,0x0,0x0,0x0,0x0,0x8000,0x0,0x62000c00,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x80,0x10,0x8000,0x80,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x10,0x0,0x0,0x20000,0x20000,0x0,0x0,0x2000,0x20002,0x0,0x0,0x62000000,0x2,0x109012a,0x0,0x0,0x0,0x2,0x0,0x828,0x0,0x1000100,0x0,0x0,0x0,0x1000928,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10800000,0x62000000,0x8000,0x1000,0x1000,0x8000,0x0,0x0,0x1000938,0x62000c00,0x0,0x0,0x10,0x0,0x0,0x410,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x62000000,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x1000,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x45000,0x0,0x0,0x0,0x45000,0x0,0x10,0x0,0x40000000,0x0,0x10800000,0x0,0x10,0x0,0x20000000,0x45000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x200,0x2000,0x0,0x0,0x828,0x100,0x928,0x0,0x0,0x828,0x0,0x1000100,0x1000928,0x0,0x0,0x0,0x2000000,0x2,0x0,0x828,0x0,0x100,0x928,0x0,0x0,0x0,0x8000,0x0,0x0,0x44100414,0x0,0x828,0x0,0x100,0x928,0x0,0x820,0x820,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x62000000,0x0,0x0,0x0,0x0,0x44100414,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x828,0x0,0x100,0x928,0x20,0x0,0x800,0x800,0x0,0x820,0x44100414,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x62000000,0x0,0x0,0x62000000,0x62000c00,0x40000000,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x8000,0x0,0x920,0x820,0x0,0x100,0x44100414,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6003200,0x1580,0x1100,0x0,0x0,0x0,0x80000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x6001200,0x0,0x2000,0x6003200,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x1580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x40,0x8000,0x8000,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x20000,0x20000,0x20,0x0,0x0,0x0,0x2,0x2000220,0x0,0x0,0x0,0x0,0x0,0x6001200,0x0,0x0,0x8000,0x0,0x0,0x6001200,0x0,0x40,0x0,0x8,0x80,0x480,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x2,0x10,0x10,0x2,0x0,0x0,0x6003200,0x1580,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x2000,0x10,0x10,0x0,0x0,0x2000000,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x20,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x10,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6002000,0x0,0x20000,0x20,0x0,0x4001200,0x0,0x4001200,0x20,0x0,0x6001200,0x0,0x0,0x6001200,0x0,0x0,0x0,0x0,0x0,0x0,0x4001200,0x0,0x0,0x4001200,0x0,0x80,0x0,0x0,0x80,0x0,0x180000,0x0,0x4001200,0x0,0x0,0x4001200,0x0,0x1200,0x1200,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x4000,0x0,0x0,0x0,0x180000,0x0,0xd8600000,0x0,0x20000,0x10000,0x0,0x10000,0x0,0x8,0x0,0x100000,0x0,0x200,0x0,0x4001200,0x0,0x0,0x4001200,0x200,0x0,0x1000,0x1000,0x0,0x1200,0x180000,0x2000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0xc800,0x0,0x0,0x4000000,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1100,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x4001200,0x4001200,0x0,0x0,0x180000,0x0,0x4000,0x4000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3107,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x2102,0x1000,0x5,0x3107,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x8000,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x8000,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x1000,0x1000,0x20,0x0,0x80,0x1000,0x0,0x20,0x0,0x0,0x2507,0x0,0x0,0x0,0x0,0x0,0x2102,0x1000,0x5,0x0,0x0,0x40,0x3107,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3107,0x20000,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x10000,0x0,0x0,0x0,0xc0000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x2004,0x0,0x80,0x0,0x0,0x3102,0x0,0x3102,0x0,0x0,0x2102,0x1000,0x5,0x3107,0x0,0x0,0x0,0x0,0x0,0x0,0x2102,0x1000,0x0,0x3102,0x0,0x0,0x0,0x0,0x0,0x0,0x14000,0x0,0x2102,0x1000,0x0,0x3102,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14000,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2102,0x1000,0x0,0x3102,0x0,0x0,0x0,0x0,0x0,0x0,0x14000,0x0,0x0,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x3102,0x2102,0x1000,0x0,0x14000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x204,0x0,0x2820,0x40062b64,0xe0000,0x0,0x8000000,0x2920,0x2820,0x0,0x820,0x0,0x40062b64,0x40062b64,0x0,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x820,0x40062b64,0x820,0x2820,0x0,0x0,0x0,0x820,0x0,0x820,0x820,0x0,0x4000000,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x10000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2820,0x0,0x40062b64,0x0,0x0,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x2820,0x40000000,0x0,0x0,0x0,0x0,0x0,0x2920,0x2820,0x2820,0x2920,0x920,0x0,0x820,0x820,0x0,0x0,0x40002b64,0x0,0x0,0x0,0x0,0x2820,0x2820,0x0,0x40062b64,0x820,0x820,0x2820,0x0,0x0,0x0,0x2920,0x0,0x820,0x0,0x820,0x0,0x0,0x820,0x0,0x40062b64,0x0,0x0,0x40000000,0x2820,0x0,0x820,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x4000000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x2960,0x0,0x0,0x820,0x0,0x820,0x4000,0x0,0x18000,0x2820,0x0,0x0,0x820,0x820,0x0,0x820,0x204,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x0,0x820,0x820,0x2820,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x820,0x0,0x40000000,0x0,0x0,0x820,0x48002820,0x820,0x0,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x40000000,0x2820,0x820,0x820,0x820,0x820,0x3f00000,0x3f00000,0x820,0x0,0x820,0x40062b64,0x0,0x2820,0x0,0x0,0x48002820,0x820,0x0,0x60000,0x0,0x0,0x10000000,0x0,0x0,0x2820,0x2820,0x0,0x60000,0x0,0x2820,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x48002820,0x0,0x10000000,0x0,0x10000000,0x0,0x10000000,0x0,0x2920,0x40002820,0x0,0x40000000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x40062b64,0x0,0x0,0x40062b64,0x40062b64,0x820,0x0,0x0,0x0,0x820,0x0,0x0,0x820,0x820,0x0,0x820,0x820,0x0,0x0,0x0,0x820,0x0,0x0,0x0,0x0,0x48002820,0x820,0x820,0x0,0x10000000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[140];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public VhdlParserCore(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VhdlParserCore(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VhdlParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public VhdlParserCore(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VhdlParserCoreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VhdlParserCore(VhdlParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VhdlParserCoreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 306; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[166];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 306; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 166; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 140; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
