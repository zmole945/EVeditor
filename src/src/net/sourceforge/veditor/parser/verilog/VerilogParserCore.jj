/*******************************************************************************
 * Copyright (c) 2004, 2006 KOBAYASHI Tadashi and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    KOBAYASHI Tadashi - initial API and implementation
 *******************************************************************************/

options {
	JAVA_UNICODE_ESCAPE = true ;
	STATIC = false ;
}

PARSER_BEGIN(VerilogParserCore)

package net.sourceforge.veditor.parser.verilog;

public abstract class VerilogParserCore
{
	protected abstract void beginStatement();
	protected abstract void endStatement();
	protected abstract void beginOutlineElement(int begin,int col,String name,String type);
	protected abstract void endOutlineElement(int end,int col,String name,String type);
	protected abstract void addCollapsible(int startLine,int endLine);
}

PARSER_END(VerilogParserCore)

//
// operation for /* */
//
MORE :
{
	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SKIP :
{
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
	< ~[] >
}


//
// ignore from `else to `endif
//
<IN_ELSE_BLOCK>
SKIP :
{
	<ENDIF: "`endif" > : DEFAULT
}

<IN_ELSE_BLOCK>
MORE :
{
	< ~[] >
}

SKIP :
{
	" " | "\t" | "\r" | "\n" | "\f"
}

SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: "//" (~["\n"])* >
|	<DEFINE:	"`define" (~["\n"])* >
|	<UNDEF:		"`undef" (~["\n"])* >
|	<DIFDEF:	"`ifdef" (~["\n"])* >
|	<DIF:		"`if" (~["\n"])* >
|	<DELSE:		"`else" (~["\n"])* >	: IN_ELSE_BLOCK
|	<DENDIF:	"`endif" (~["\n"])* >
|	<TIMESCALE:	"`timescale" (~["\n"])* >
|	<INCLUDE:	"`include" (~["\n"])* >
}

TOKEN :
{
	<MODULE:	"module">
|	<ENDMODULE: "endmodule">
|	<BEGIN: 	"begin">
|	<END:		"end">
|	<FORK:		"fork">
|	<JOIN:		"join">
|	<SPECIFY:	"specify">
|	<ENDSPECIFY:"endspecify">
|	<IF:		"if">
|	<ELSE:		"else">
|	<WHILE:		"while">
|	<FOR:		"for">
|	<FOREVER:	"forever">
|	<REPEAT:	"repeat">
|	<WAIT:		"wait">
|	<CASE:		"case">
|	<CASEX:		"casex">
|	<DEFAULT_LABEL:	"default">
|	<ENDCASE:	"endcase">
|	<FUNCTION:	"function">
|	<ENDFUNCTION: "endfunction">
|	<TASK:		"task">
|	<ENDTASK:	"endtask">
|	<GENERATE:	"generate">
|	<ENDGENERATE:	"endgenerate">
|	<INPUT:		"input">
|	<OUTPUT:	"output">
|	<INOUT: 	"inout">
|	<INTEGER:	"integer">
|	<WIRE:		"wire">
|	<REG:		"reg">
|	<EVENT:		"event">
|	<GENVAR:	"genvar">
|	<REAL:		"real">
|	<PARAMETER:	"parameter"> 
|	<SIGNED:	"signed">
|	<STMT_HEAD: (
		"localparam" | "time" |
		"assign" | "defparam" | "tri0" | "tri1" | "pullup" | "pulldown" |
		"buf"
	)>
|   <PRIM_1IN_XOUT      : ( "and" | "or" | "xor" | "nand" | "nor" | "xnor")>
|   <PRIM_1OUT_XIN      : ( "buf" | "not" )>
|   <PRIM_1OUT_1IN_1CNTL: ( "bufif0" | "bufif1" | "notif0" | "notif1" | "pmos" | "nmos" | "rpmos" | "rnmos")>
|   <PRIM_1OUT          : ( "pullup" | "pulldown")>
|   <PRIM_1OUT_1IN_NC_PC: ("cmos" | "rcmos" )>
|   <PRIM_BI            : ("tran" |  "rtran" | "tranif0" | "rtranif0" | "rtranif1")>
|   <BLOCK_HEAD         : ( "always" | "initial" )>
|   <ESCAPE:    "\\">
|	<LPAREN:	"(" >
|	<RPAREN:	")" >
|	<LBRACE: 	"{" >
|	<RBRACE: 	"}" >
|	<LBRACKET:	"[" >
|	<RBRACKET:	"]" >
|	<EOS:		";" >
|	<PARA:		"#" >
|	<AT:		"@" >
|	<BQ:		"`" >
|	<DOLLAR:	"$" >
|	<COMMA:		"," >
|	<COLON:		":" >
|	<EQUAL:		"=" >
|	<IDENT: 	([ "a"-"z", "A"-"Z", "0"-"9", "_", ".", "'", "?", "\""])+>
|	<SPC_CHAR:	~[ " ", "\t" ] >
|	<OTHER:		"[.]" >
}

void modules() :
{
	Token name ;
	Token end ;
}
{
	(
		<MODULE> name = identifier()
		{			
			beginOutlineElement(name.beginLine,name.beginColumn, name.image,"module#");
		}
		[
			"(" [ argument() ( "," argument() )* ] ")"
		]
		<EOS>
		moduleBody()
		end = <ENDMODULE>
		{		
			endOutlineElement(end.endLine,end.endColumn, name.image,"module#");
		}
	)*
}


void argument() :
{
	Token direction, name;
	String modifier="";
	String range;
}
{
		// C++ style argument
		( direction=<INPUT>  | direction=<OUTPUT>  | direction=<INOUT> )
		[ modifier = variableModifier() ]
		range = bitRange()
		name = identifier()
		{
			String type = "port#" + direction.image + "#" + "" + "#" + range;
			beginOutlineElement(
				name.beginLine, name.beginColumn, name.image, type);
			endOutlineElement(name.endLine, name.endColumn, name.image, type);
		}
	|
		// C style argument, portDecl will add it to OutlineContainer
		identifier()
}


String bitRange() :
{
	String range = "";
	Token msb, lsb;
}
{
	[
		"[" msb = skipTo(COLON) lsb = skipTo(RBRACKET)
		{
			range = "[" + msb.image + ":" + lsb.image + "]";
		}
	]
	{
		return range;
	}
}

void portDecl():
{
	Token direction,name;
	String modifier="";
	String range;
}
{
	( direction=<INPUT>  | direction=<OUTPUT>  | direction=<INOUT> )
	[ modifier=variableModifier() ]
	range = bitRange()
	name = skipTo(EOS)
	{
		beginStatement();
		breakupMulti(name,name,"port#"+direction.image+"#"+modifier+"#"+range);
		endStatement();
	}
}
 


void primitiveInstance():
{
}
{
	
	(     <PRIM_1IN_XOUT>      
      	| <PRIM_1OUT_XIN>      
		| <PRIM_1OUT_1IN_1CNTL>
		| <PRIM_1OUT>
		| <PRIM_1OUT_1IN_NC_PC>
		| <PRIM_BI>
	)      
	{
		skipTo(EOS);
	}
}

void moduleBody() :
{
	Token	module, inst, iend ;
}
{
	(  	    portDecl()
		|   variableDecl()
		|	parameterDecl()
		|	<STMT_HEAD> {beginStatement();} skipTo( EOS ) {endStatement();}
		|	blockDecl()
		|	<SPECIFY> {beginStatement();} skipTo( ENDSPECIFY ) {endStatement();}
		|	functionDecl()
		|	taskDecl()
		|	generate()
		|   moduleInst()
		|   primitiveInstance()
	)*
}

void moduleInst():
{
	Token	module, inst, iend ;
}
{ 
	module = identifier() 
	{ beginStatement(); }
	
	(   //module instantiation
		(   [ "#" ( identifier() | <LPAREN> skipParen() <RPAREN> ) ]	
			inst = identifier() 
		    <LPAREN> skipParen() <RPAREN> 
		    iend = <EOS>
		    {			
				beginOutlineElement(module.beginLine,module.beginColumn,inst.image,"instance#"+module.image);
				endOutlineElement( iend.endLine,iend.endColumn,inst.image,"instance#"+module.image);
				addCollapsible(module.beginLine,iend.endLine);
				endStatement();
		     }
		 )
	 |   //user defined primitive	 
		 (  <LPAREN> skipParen() <RPAREN>
		 	iend = <EOS>
		 	{
		 	 endStatement();
		 	} 
		 )
	)
}

void blockDecl():
{
	Token start;
}
{
	start=<BLOCK_HEAD> 
	{
		beginStatement();
	} 
	statement() 
	{
		endStatement();
		addCollapsible(start.beginLine,token.endLine);
	}
}
void variableDecl():
{
	Token variable;
	String mod="";
	String range;
}
{
	( mod = variableModifier() )
	range = bitRange()
	variable = identifier() ( "[" skipTo(RBRACKET) )*
	{
		beginOutlineElement(variable.beginLine,variable.beginColumn,variable.image,"variable#"+mod+"#"+range);
		endOutlineElement( variable.endLine,variable.endColumn,variable.image,"variable#"+mod+"#"+range);
	}
	(
		","
		variable = identifier() ( "[" skipTo(RBRACKET) )*
		{
			beginOutlineElement(variable.beginLine,variable.beginColumn,variable.image,"variable#"+mod+"#"+range);
			endOutlineElement( variable.endLine,variable.endColumn,variable.image,"variable#"+mod+"#"+range);
		}
	)*
	(
		";"
	|	"=" skipTo( EOS )
	)

}


String variableModifier() :
{
	String value = null;
}
{
	(
			"real"
		|	"integer"
		|	"event"
		|	"genvar"
		|	"signed"
		|	"wire"	["signed" { value = "wire signed"; } ]
		|	"reg"	["signed" { value = "reg signed"; } ]
	)
	{
		if (value == null)
			return token.image;
		else
			return value;
	}
}


Token identifier() :
{
	Token token ;
}
{
	[ "`" ]
    (<ESCAPE> {token = skipToSpace();}	| token = <IDENT> )		
	{return token;}	
}


void parameterDecl():
{
	Token name,value;
}
{ 
	<PARAMETER>
	[   <REAL>
	  |	<INTEGER>
	  |	"[" skipTo(RBRACKET)
	]
	(	
		LOOKAHEAD(2)
		name = identifier()
		"="
		value = skipToOr(COMMA,EOS)
		{			
			beginOutlineElement(name.beginLine,name.beginColumn,name.image,"parameter#"+value.image);
			endOutlineElement( name.endLine,name.endColumn,name.image,"parameter#"+value.image);
		}
	)+	

}
 

void delay() :
{
}
{
	( "@" | "#" ) ( "(" skipParen() ")" | identifier() )
}

void statement() :
{
	Token end;
}
{
	( delay() )*
	(	";"
	|	":" identifier()
	|	<STMT_HEAD> skipTo( EOS )
	|	ifStatement()
	|	block()
	|	"$" skipTo( EOS )
	|	"{" skipTo( EOS )
	|	identifier() skipTo( EOS )
	|	caseStatement()
	|	whileStatement()
	|	forStatement()
	|	foreverStatement()
	|	repeatStatement()
	|	waitStatement()
	)
}


void block() :
{
	Token start,end;
}
{
	( <BEGIN> | <FORK> )
	( statement() )*
	(<END> | <JOIN> )
	
	
}

void functionDecl():
{
}
{
	<FUNCTION> {beginStatement();} function() {endStatement();}
}

void taskDecl():
{
}
{
	<TASK> {beginStatement();} task() {endStatement();}
}

void function() :
{
	Token name, end ;
}
{
	[ "[" skipParen() "]" ]
	name = identifier()
	{
		beginOutlineElement(name.beginLine,name.beginColumn,name.image,"function#");
	}
	end = skipTo( ENDFUNCTION )
	{		
		endOutlineElement(end.endLine,end.endColumn,name.image,"function#");
		addCollapsible(name.beginLine,end.endLine);				
	}
}

void task() :
{
	Token name, end ;
}
{
	name = identifier()
	{
		beginOutlineElement(name.beginLine,name.beginColumn,name.image,"task#");
	}
	end = skipTo( ENDTASK )
	{	
		endOutlineElement(end.endLine,end.endColumn,name.image,"task#");
		addCollapsible(name.beginLine,end.endLine);
	}
}

void generate() :
{
}
{
	<GENERATE>
	generateStatement()
	<ENDGENERATE>
}

void generateStatement() : 
{
}
{	
	(
		   variableDecl()		
		|  generateForStatement()
	    |  generateIfStatement()
		|  <STMT_HEAD> skipTo( EOS )
	    |  moduleInst()
	    |  blockDecl() 
	    |  functionDecl()
		|  taskDecl()
		|	generate()  
	)*
	
}

void ifStatement() :
{
}
{
	<IF> "(" skipParen() ")" statement()
	[ LOOKAHEAD(1) <ELSE> statement() ]
}

void caseStatement() :
{
}
{
	(<CASE>|<CASEX>) "(" skipParen() ")"
	(
			identifier() ( "," identifier() )* ":" statement()
		|	("{") identifier() ( "," identifier() )* ("}")
			( (",")  ("{") identifier() ( "," identifier() )* ("}") )*  ":" statement()
		|	"default" [ LOOKAHEAD(2) ":" ] statement()
	)*
	<ENDCASE>
}

void whileStatement() :
{
}
{
	<WHILE> "(" skipParen() ")" statement()
}

void forStatement() :
{
}
{
	<FOR> "(" skipParen() ")" statement()
}

void foreverStatement() :
{
}
{
	<FOREVER> statement()
}

void repeatStatement() :
{
}
{
	<REPEAT> "(" skipParen() ")" statement()
}

void waitStatement() :
{
}
{
	<WAIT> "(" skipParen() ")" statement()
}

void generateForStatement() :
{
}
{
	<FOR> "(" skipParen() ")"
	<BEGIN>
	[ ":" identifier() ]
	generateStatement()
	<END>
}

void generateIfStatement() :
{
}
{
	<IF> "(" skipParen() ")"
	<BEGIN>
	[ ":" identifier() ]
	generateStatement()
	<END>
	[ LOOKAHEAD(1) <ELSE>
		(
			generateIfStatement()
		|	<BEGIN>
			[ ":" identifier() ]
			generateStatement()
			<END>
		)
	]
}

JAVACODE
void unexpectedEof(Token token)
{
	ParseException ex = new ParseException("unexpected EOF");
	ex.currentToken = token;
	throw ex;
}

JAVACODE
Token skipTo(int skip)
{
	Token current = token;
	Token token ;
	StringBuffer image = new StringBuffer();

	for(;;)
	{
		token = getToken(1);
		if (token.kind == EOF)
			unexpectedEof(current);
		if (token.kind == skip)
		{
			getNextToken();
			break ;
		}

		image.append(token.image);
		getNextToken();
	}
	token.image = image.toString();
	return token ;
}


JAVACODE
Token skipToSpace()
{
    Token current = token;
    Token token ;
    int lastColumn=-1;
    StringBuffer image = new StringBuffer();

    for(;;) 
    { 
    	    token = getToken(1);
            
            if (token.kind == EOF)
                    unexpectedEof(current);
            //if there was a break
            if (token.beginColumn != lastColumn+1 && lastColumn!=-1)
            {
                    break ;
            }
            lastColumn=token.endColumn;

            image.append(token.image);
            getNextToken();
    }
    token.image = image.toString();
    return token ;
}

JAVACODE
Token skipToOr(int skip1, int skip2)
{
	Token current = token;
	Token token ;
	StringBuffer image = new StringBuffer();

	for(;;)
	{
		token = getToken(1);
		if (token.kind == EOF)
			unexpectedEof(current);
		if (token.kind == skip1 || token.kind == skip2)
		{
			getNextToken();
			break ;
		}

		image.append(token.image);
		getNextToken();
	}
	token.image = image.toString();
	return token ;
}

JAVACODE
void skipParen()
{
	Token current = token;
	Token token;
	int nesting = 1 ;
	for(;;)
	{
		token = getToken(1);
		if (token.kind == EOF)
			unexpectedEof(current);
		if (token.kind == LPAREN || token.kind == LBRACKET)
			nesting++;
		if (token.kind == RPAREN || token.kind == RBRACKET)
		{
			nesting--;
			if ( nesting == 0 )
				break;
		}
		getNextToken();
	}
}

JAVACODE
void skipToEndcase()
{
	Token current = token;
	Token token ;
	int nesting = 1 ;
	for(;;)
	{
		token = getToken( 1 );
		if ( token.kind == EOF )
			unexpectedEof(current);
		if ( token.kind == CASE )
			nesting++;
		if ( token.kind == ENDCASE )
		{
			nesting--;
			if ( nesting == 0 )
			{
				getNextToken();
				break;
			}
		}
		getNextToken();
	}
}

JAVACODE
void breakupMulti(Token start,Token end,String type)
{
	String names[]=start.image.split(",");
	
	for( String name : names){
		beginOutlineElement(start.beginLine,start.beginColumn,name,type);
		endOutlineElement(end.endLine,end.endColumn,name,type);
	}
}

