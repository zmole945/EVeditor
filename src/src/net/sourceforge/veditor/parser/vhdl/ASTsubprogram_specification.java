/**
 * 
 * This file is based on the VHDL parser originally developed by
 * (c) 1997 Christoph Grimm,
 * J.W. Goethe-University Frankfurt
 * Department for computer engineering
 *
 **/
package net.sourceforge.veditor.parser.vhdl;



/* Generated By:JJTree: Do not edit this line. ASTsubprogram_specification.java */
/* JJT: 0.3pre1 */

public class ASTsubprogram_specification extends SimpleNode {
  ASTsubprogram_specification(int id) {
    super(id);
  }
  
  public String getIdentifier(){
	  Node child=getChild(0);
	  if(child instanceof ASTidentifier){
		  return ((ASTidentifier)child).name;
	  }
	  else if (child instanceof ASToperator_symbol){
		  ASToperator_symbol symbol=(ASToperator_symbol)child;
		  return symbol.first_token.image;
	  }
	  return "";
  }
  
  public String getType(){
	  String designator=getIdentifier();
	  StringBuffer results=new StringBuffer();
	  //scan until we find the designator, the token immediately before 
	  //the designator is the type
	  for(Token token=first_token; token!=null && token!=last_token; token=token.next){
		  if(token.image.equals(designator)){
			  break;
		  }
		  results.append(token.image);
	  }
	  
	  return results.toString();
  }
  
  public String getReturnType(){
	  //the return type is a name
	  for(Node child:children){
		if(child instanceof ASTname){
			return ((ASTname)child).getIdentifier();
		}
	  }
	  return "";
  }
  
  public ASTformal_parameter_list getParameters(){
	//the return type is a name
	  for(Node child:children){
		if(child instanceof ASTformal_parameter_list){
			return ((ASTformal_parameter_list)child);
		}
	  }
	  return null;
  }
}
